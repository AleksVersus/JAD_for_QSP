==Конспекты==

=Синтаксические правила=

1. Недопустимо "складывать" значения разных типов

	"Hello"+20 /* ошибка */

2. Тело многострочной конструкции записывается после двоеточия в следующей строке с отступом.

3. Отступы указывают интерпертатору отдельный блок кода. Т.е. все подряд идущие строки, записанные с одинаковым отступом представляют собой отдельный блок кода.

4. Принято записывать отступ четырьмя пробелами.

5. Действия (операции) выполняются в порядке приоритета в выражении. У функций приоритет выше.

6. Переменные
	* Чувствительны к регистру
	* в имени не должно быть пробелов
	* имя не должно начинаться с числа

7. Строковые значения можно указывать в кавычках или апострофах.

8. Многострочный текст записывается в тройные кавычки/апострофы

"""строка
Строка
Строка
ещё строка"""

9. 	В Python 2
		3/2=1 - деление с остатком
		3//2=1 - деление с остатком
	В Python 3
		3/2=1.5 - приведение к вещественным значениям
		3//2=1 - деление с остатком

10. Если поставить запятую после команды, следующая команда начнёт работу в той же строке.

	print 'Текст 1',
	print 'Текст 2'

	Оба текста будут выведены в одну строку. Между текстами вставится пробел.

11. Можно объединять операторы сравнения:

	if 8 < age < 12:
		print "Yea"

12. все ключевые слова пишутся в нижнем регистре. Имена переменных могут совпадать с именами ключевых слов, но отличаться по регистру.

13. Текстовая строка является СПИСКОМ символов. Это позволяет её использовать в качестве списка для счётчика:

	for i in "Hello World":
		print i

14. Комментарий начинается с решётки

	# Комментарий

	Комментарии могут идти в конце строки. Многострочных комментариев в Python не бывает, используется блок однострочных.

15. Разбивка длинных строк кода производится с помощью обратного слэша

	tot_cal=(dog*dog_cal)+(bun*bun_cal)\
		+(mustard*mus_cal)+(ketchup*ket_cal)\
		+(onion*onion_cal)

16. Использование локальных и глобальных переменных с одинаковыми именами не запрещено, но нежелательно.

17. Python является объектно ориентированным языком, соответственно мы можем создавать объекты.

	Доступ к атрибуту объекта записывается так:

		ball.color

	Методы, работающие с объектом вызываются так:

		ball.kick()

18. Можно присваивать нескольким переменным значения одной командой

	x, y = 2, 5

	Или сразу нескольким группам переменных

	x,y = a,b = 2,5

	Значения из списка так же можно присваивать переменным:

	a=[2,5]
	x,y=a



=Команды=

--Работа со списками--

При работе с обычными переменными типа:

	a = 9
	b = a

	При изменении значения b, значение a не меняется, но если

	a = [9,3,6]
	b = a
	b.sort()

	меняет так же и список a!!! Фактически мы работаем с одним списком.

Списки указываются в квадратных скобках:

	newList = [12,32,45,67,56,78,98]

	Элементы списков перечисляются через запятые. Можно создать пустой список:

	newList = []

Доступ к элементу списка осуществляется через указание имени списка и номера элемента в квадратных скобках:
	
	newList[2]

	Таким образом можно получить элемент списка, или изменить:

	number = newList[2]

	newList[2] = 99

	Но нельзя создать новый элемент, сославшись на несуществующий элемент списка:

	newList[88]=666 # не сработает если newList[88] не существует.

Получение среза списка — доступ сразу к нескольким элементам списка (при этом создаётся новый список):

	print newList[1:4]

	вернёт

	[32,45,67]

	Сокращённая запись (возвращает срез списка, т.е. новый список, полученный из исходного):

	newList[:4] — вернёт первые 4 элемента списка

	newList[4:] - вернёт все элементы списка, начиная с четвёртого

	newList[:] — вернёт все элементы списка в виде списка.

Проверка наличия элемента в списке осуществляется с помощью ключевого слова in:

	if 'a' in letters:
		print "Символ найден"

Списки можно усложнять, преобразуя в структуры данных.

	classNums = [[1,2,3],[4,5,6],[7,8,9]]

	Чтобы получить доступ к отдельному элементу вложенного списка используем добавочный индекс:

	classNums[1][2] — вернёт число 6

Списки можно склеивать, при этом получается новый список:

	list1=[0,1,2,3]
	list2=[4,5,6,7]
	list3=list1+list2
	print list1
	print list2
	print list3

-методы-

.append() — метод, добавляющий элемент в конец списка

	friends = []
	friends.append("David")

.extend() — добавляет указанный список в конец текущего списка:

	alphabet = ["a","b","c","d","e"]
	letters = ["p","q","r"]
	alphabet.extend(letters)
	print alphabet

	["a","b","c","d","e","p","q","r"]

.insert() — вставляет элемент в произвольную позицию. При этом элемент от позиции и справа сдвигаются на одну позицию вправо:

	alphabet = ["a","b","c","d","e"]
	alphabet.insert(2,"z")
	print alphabet

	["a","b","z","c","d","e"]

.remove() - удаляет указанный элемент по значению. Элементы справа от удаляемого сдвигаются влево.

	alphabet = ["a","b","c","d","e"]
	alphabet.remove("d")
	print alphabet

	["a","b","c","e"]

	Удаление несуществующего жлемента приведёт к ошибке.

см. del

.pop() - удаляет из списка последний элемент, но возвращает его.

	alphabet = ["a","b","c","d","e"]
	pup=alphabet.pop()
	print pup
	print alphabet

	e
	["a","b","c","d"]

	Если указать индекс, то .pop() "извлекает" элемент с указанным индексом. Элементы справа от извлекаемого сдвигаются влево.

	alphabet = ["a","b","c","d","e"]
	pup=alphabet.pop(2)
	print pup
	print alphabet

	c
	['a', 'b', 'd', 'e']

.index() - вернёт индекс элемента, соответствующего указанному значению.

	alphabet = ["a","b","c","d","e"]
	print alphabet.index("d")

	3

.sort() - сортирует список в алфавитном порядке, или от меньшего к большему
	
	Если указать специальный параметр, сортировка будет осуществляться в обратном порядке

	alphabet.sort(reverse=True)

.reverse() - меняет порядок размещения элементов на обратный.

--Кортежи--

Кортежи — это своего рода неизменные списки. Они создаются один раз и в процессе никак не меняются:

	my_tuple = ("красный","зелёный","синий")

При объявлении кортежей можно не указывать скобки:

	my_tuple = 2, 4, 6, 8	

--Словари--

Словари включают в себя элементы из двух составляющих типа key:value (ключ:значение), которые записываются в фигурных скобках:

	phoneNumbers = {"Джон":"555-1234"}

Добавление элемента в словарь:

	phoneNumbers["Джон"]="555-1234"

Элементы внутри словарей разделяются запятыми:

	{'Боб': '444-4321', 'Джон': '555-1234', 'Мэри': '555-6789', 'Дженни':'867-5309'}

Значение из словаря можно вернуть с помощью известного ключа:

	print phoneNumbers["Джон"]

	'555-1234'

В качестве значения можно использовать элемент любого типа, в т.ч. список или словарь.
В качестве ключа можно использовать только неизменные значения: число, строку, кортеж, булевый тип.

Проверка наличия элемента с указанным ключом в словаре с помощью операции in:

	if "Джон" in phoneNumbers:
		print "Есть в записной книжке"

-Методы-

.keys() - генерирует список всех ключей

	print phoneNumbers.keys()
	['Боб','Джон','Мэри','Дженни']

.values() - генерирует список всех значений
	
	print phoneNumbers.values()
	['444-4321', '555-1234', '555-6789', '867-5309']

см. del

.clear() - очистка словаря


--Спецсимволы в строках--

\t - символ табуляции

--Операторы--

print — вывод строки на экран с переходом на следующую строку.
	
	При этом можно указывать несколько аргументов. Аргументы конкатенируются, но между ними вставляется пробел.

	print "Строка текста"

	print "Строка",переменная,"Строка",456

	print без аргумента выводит пустую строку

	В Python 3 аргументы помещаются в скобки:
		print("Меня","Зовут","Дэйв")

if elif else — операторы конструкций условия. 

	if - если
	elif - иначе если
	else - иначи

	if ads < fend:
		print "could"
	elif ads = fend:
		print "norm"
	else:
		print "hot"

	после else ставится двоеточие

while — оператор цикла "Пока не будет выполнено условие, выполнять следующее"

	while i<8:
		print i
		i+=1

for — оператор цикла "Для".

	for looper in [1,2,3,4,5]:
		print looper

continue - прыжок на следующую итерацию
break - прерывание выполнения

del - это скорее процедура, нежели метод.

	Удаляет элемент с указанным индексом в списке:

	alphabet = ["a","b","c","d","e"]
	del alphabet[3]
	print alphabet

	["a","b","c","e"]

	Удаляет элемент с указанным ключом в списке:

	phoneNumbers = {'Боб': '444-4321', 'Джон': '555-1234', 'Мэри': '555-6789', 'Дженни':'867-5309'}
	del phoneNumbers['Джон']
	print phoneNumbers

	{'Боб': '444-4321', 'Мэри': '555-6789', 'Дженни':'867-5309'}

def — служит для определения функции:

	def printMyAddress():
		print "Свердловская обл.,"
		print "г.Невьянск, ул. Матвеева,"
		print "д.30,кв.30"

	В скобках указываются аргументы. При определении функции задаются аргументы — имена локальных для функции переменных.

	def printName(my_name):
		print my_name

	При вызове функции аргументами указываются значения!

	printName("Aleks")

	Аргументы перечисляются через запятую:

	def printName(my_name,sur_name):
		print my_name,sur_name
	printName("Aleks","Versus")

	Значение возвращает ключевое слово return:

	def sumOfNum(number_):
		num_str= str(number_)
		for i in num_str:
			sum_result += int(i)
		return sum_result

	Попытка присвоить значение любой переменной внутри функции, создаёт локальную переменную, если локальная переменная ещё не была определена.

return — объявляет указанное значение результатом, который должна вернуть функция.

global — объявляет указанную переменную глобальной для использования вне функции. Если глобальная переменная ещё не существует, функция её создаст.



--Функции--

input("Приглашение") - приглашение к вводу данных, возвращает значение, введённое пользователем.
	в Python 3 input() - только строковые значения (?)
	в Python 2 raw_input() для строк, input() для чисел

float() — возвращает вещественное число
int() — возвращает целое число с отсечением дробной части
str() — возвращает строку текста
type() — возвращает тип значения, при этом сам type возвращает значение типа type

	print str(type(a))

	вернёт <type 'str'>

range() — генерирует список.

	range(1,5) # сгенерирует список из четырёх элементов [1,2,3,4]
	range(5) # сгенерирует список из пяти элементов [0,1,2,3,4]
	range(0,5,2) # сгенерирует список [0,2,4], т.е. с шагом 2
	range(5,0,-1) # сгенерирует список [5,4,3,2,1]

	в Python 3 функция создаёт интерфейс iterable

sorted() - возвращает отсортированный список

	original = [5,3,2,1,4]
	replical = sorted(original)
	print replical

	[1,2,3,4,5]


-справка-
help() - интерактивная справка
help(object) - помощь по укзанному объекту

--Операции--

= присваивание

+ сложение
- вычитание
+= приращение, инкремент
-= отрицательное приращение, декремент

* умножение
/ деление

"cat"+"dog" — конкатенация
"Hello"*20 — двадцатикратный вывод строки



( ) - повышают приоритет операции

** — возведение в степень
% — вычисляет остаток от деления


== равны
<> != не равны
< меньше
> больше
<= меньше либо равно
>= больше либо равно

and — логическое И.
or — логическое ИЛИ.
not — отрицание, логическая инверсия


=EasyGUI=

msgbox() — выводит окно сообщения с кнопкой OK

	easygui.msgbox("Сообщение")

buttonbox() — выводит окно сообщения с кнопками с указанным текстом
	
	easygui.buttonbox("Whats your favorite ice cream flavor?",choices=['Vanilla','Chocolate','Strawberry'])

choicebox() — выводит окно сообщения со списком указанных вариантов

	easygui.choicebox("Whats your favorite ice cream flavor?",choices=['Vanilla','Chocolate','Strawberry'])

enterbox() — выводит окно сообщения со строкой ввода.

	easygui.enterbox("Сообщение",default="Значение по умолчанию")

integerbox() — предлагает ввести число

	 integerbox(message, title, default_integer, lower_bound, upper_bound)


