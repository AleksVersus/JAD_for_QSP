=JAD=
JAD — joint application development

Или по-русски: совместная разработка приложений.

Здесь я пытаюсь описать порядок совместной разработки QSP-игр и выбранные мной инструменты.

--Выбор редактора--

* В идеале нам нужен редактор, который на лету проверяет очевидные ошибки, из которого можно запустить игру прямо в плеере, и который будет работать с репозиторием на гитхабе.

	По-идее нам подходит VS Code, однако придётся лезть в код Псевдопода, перелопачивать его расширение и делать его таким, чтобы оно умело к подсветке синтаксиса ещё и запускать файлы и собирать из них игры и вообще много чего, что пока что выглядит сложным.

	Поэтому пока что мы остановимся на Sublime Text.

* Sublime Text позволяет даже мне, не особо шарящему в программировании, написать собственную подсветку синтаксиса, имеет выход на консоль и собственный Python-интерпретатор. Это значит, что теоретически можно написать скрипт, который можно запускать из Sublime, и который будет конвертить проект из разрозненных файлов в файл формата QSP, а то и в несколько файлов. Сам проект можно хранить, как исходники, в виде файлов формата txt2gam, и sublime merge позволяет в сочетании с sublime text сразу пушить проект в репозиторий.

--Порядок работы с проектом--

1. Проект организуется по папкам. В корневой папке проекта должен лежать файл "project.json", который и содержит в себе инструкции по сборке проекта. (см. раздел "project.json").
2. Все рабочие файлы проекта пишутся в формате TXT2GAM и сохраняются с расширениями ".qsps", ".qsp-txt" или ".txt-qsp", предпочтительно указывать первое расширение. В качестве исключения можно указывать иные расширения, но в таком случае необходимо будет указывать пути до конкретных файлов (см. раздел "project.json").
3. После редактирования и сохранения файлов можно выбрать один из режимов сборки:
	* "QSP - build" — собрать файлы согласно инструкции и сконвертировать в ".qsp"
	* "QSP - run" — запустить стартовый файл, указанный в проекте "project.json", в плеере.
	* "QSP - build and run" — собрать файлы согласно инструкции и запустить стартовый файл в плеере.

Для примера рассмотрим мой проект игры "fantastic battles", который я писал в Quest Generator.

В этом проекте пришлось разбить игру на отдельные модули для удобства разработки, и всего таких модулей получилось четыре:

	* "fb_v.0.2.qsp" — основной файл игры, в котором подключаются все прочие файлы модулей
	* "intro.qsp" — модуль вводных данных игры
	* "drive.qsp" — основной движок игры
	* "bases.qsp" — различные базы исходников для игры

Каждый из этих файлов может содержать множество локаций, поэтому для самих файлов ведутся файлы ".qproj", которые содержат псевдопапки. Например, в "fb_v.0.2.qsp" локации разбиты на псевдопапки:
	
	-	"[start]" — стартовая локация без папки
	"системное меню" — папка с локациями основного меню
	-	"[1.0_game_start]" — локация, запускающая игру
	-	"[0.1_game_info]" — локация с информацией об игре
	"локации места" — папка локаций места, и собственно локации:
	-	"[м:0]_общий_вид_локации_места"
	-	"[м:1]_дом"
	-	"[м:2]_улица"
	-	"место;стандартная_кухня"
	"обязательные локации" — папка стандартных локаций для этой игры
	-	"[chest]" — сундуки
	-	"[death]" — смерть
	-	"[help]" — помощь



--project.json--

Пример представлен в файле "example.json".

Как видно из расширения, проект представляет собой JSON-файл. Это значит, что вся его структура состоит из JSON-объектов и JSON-массивов.