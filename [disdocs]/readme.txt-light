=JAD=
JAD — joint application development

Или по-русски: совместная разработка приложений.

Здесь я пытаюсь описать порядок совместной разработки QSP-игр и выбранные мной инструменты.

--Выбор редактора--

* В идеале нам нужен редактор, который на лету проверяет очевидные ошибки, из которого можно запустить игру прямо в плеере, и который будет работать с репозиторием на гитхабе.

	По-идее нам подходит VS Code, однако придётся лезть в код Псевдопода, перелопачивать его расширение и делать его таким, чтобы оно умело к подсветке синтаксиса ещё и запускать файлы и собирать из них игры и вообще много чего, что пока что выглядит сложным.

	Поэтому пока что мы остановимся на Sublime Text.

* Sublime Text позволяет даже мне, не особо шарящему в программировании, написать собственную подсветку синтаксиса, имеет выход на консоль и собственный Python-интерпретатор. Это значит, что теоретически можно написать скрипт, который можно запускать из Sublime, и который будет конвертить проект из разрозненных файлов в файл формата QSP, а то и в несколько файлов. Сам проект можно хранить, как исходники, в виде файлов формата txt2gam, и sublime merge позволяет в сочетании с sublime text сразу пушить проект в репозиторий.

--Порядок работы с проектом--

1. Проект организуется по папкам. В корневой папке проекта должен лежать файл "project.json", который и содержит в себе инструкции по сборке проекта. (см. раздел "project.json").
2. Все рабочие файлы проекта пишутся в формате TXT2GAM и сохраняются с расширениями ".qsps", ".qsp-txt" или ".txt-qsp", предпочтительно указывать первое расширение. В качестве исключения можно указывать иные расширения, но в таком случае необходимо будет указывать пути до конкретных файлов (см. раздел "project.json").
3. После редактирования и сохранения файлов можно выбрать один из режимов сборки:
	* "QSP - build" — собрать файлы согласно инструкции и сконвертировать в ".qsp"
	* "QSP - run" — запустить стартовый файл, указанный в проекте "project.json", в плеере.
	* "QSP - build and run" — собрать файлы согласно инструкции и запустить стартовый файл в плеере.

Для примера рассмотрим мой проект игры "fantastic battles", который я писал в Quest Generator.

В этом проекте пришлось разбить игру на отдельные модули для удобства разработки, и всего таких модулей получилось четыре:

	* "fb_v.0.2.qsp" — основной файл игры, в котором подключаются все прочие файлы модулей
	* "intro.qsp" — модуль вводных данных игры
	* "drive.qsp" — основной движок игры
	* "bases.qsp" — различные базы исходников для игры

Каждый из этих файлов может содержать множество локаций, поэтому для самих файлов ведутся файлы ".qproj", которые содержат псевдопапки. Например, в "fb_v.0.2.qsp" локации разбиты на псевдопапки:
	
	-	"[start]" — стартовая локация без папки
	"системное меню" — папка с локациями основного меню
	-	"[1.0_game_start]" — локация, запускающая игру
	-	"[0.1_game_info]" — локация с информацией об игре
	"локации места" — папка локаций места, и собственно локации:
	-	"[м:0]_общий_вид_локации_места"
	-	"[м:1]_дом"
	-	"[м:2]_улица"
	-	"место;стандартная_кухня"
	"обязательные локации" — папка стандартных локаций для этой игры
	-	"[chest]" — сундуки
	-	"[death]" — смерть
	-	"[help]" — помощь

Работая в редакторе типа Sublime Text, я могу не только разбить данный файл игры на отдельные файлы и разместить их по папкам, но каждую локацию писать в отдельном файле. Я могу создавать подпапки и т.д., а потом собирать те же четыре файла из разрозненных qsps-файлов.

В данном случае я бы выделил отдельную папку под каждый модуль, в том числе — под основной файл игры. Допустим так:

	"[game]" — папка с основным файлом игры
	-	"start.qsps" — файл со стартовой локацией
	-	"системное меню" — папка с локациями системного меню
	-	-	"sysmenu.qsps" — обе локации системного меню в одном файле
	-	"локации места" — папка для локаций мест, можно дополнить другими папками
	-	-	"стандартные места" — папка для стандартных локаций мест
	-	-	-	"общий вид локации места.qsp-txt" — файл с локацией "[м:0]_общий_вид_локации_места"
	-	-	"дом.qsps" — файл с локацией "[м:1]_дом"
	-	-	"улица.qsps" — файл с локацией "[м:2]_улица"
	-	"обязательные локации" — папка с файлами обязательных локаций
	-	-	"chests.qsps" — файл с локацией "[chest]"
	-	-	"death and help.qsps" — файл с локациями "[help]" и "[death]"

Необходимо отметить, что бри сборке конечного файла из таких разрозненных файлов, к конечному файлу добавляются сначала локации из файлов, которые лежат в папках верхних уровней, затем файлы из папок нижних уровней. Таким образом локация из файла "start.qsps" окажется в самом верху списка локаций при создании файла ".qsp".

--project.json--

Пример с комментариями представлен в файле "example.json".

Как видно из расширения, проект представляет собой JSON-файл. Это значит, что вся его структура состоит из JSON-объектов (в Python - это словари) и JSON-массивов (в Python - это списки).

В данном случае корневым элементом является объект, в котором присутствуют два элемента:

	"project":[]
	"start":"startgame.qsp"

Значением элемента "project" является массив однотипных объектов, в которых присутствуют следующие элементы:

	"build":"exitfile.qsp"
	"top_location":"[start]"
	"files":[]
	"folders":[]

Элемент "build" содержит путь к конечному файлу ".qsp", который мы хотим получить.
Элемент "top_location" содержит название локации, которая должна идти самой первой в результирующем файле. В настоящее время не используется.
Элементы "files" и "folders" содержат массивы однотипных объектов. И в том и в другом случаем объекты содержат элементы "path", однако для "files" каждый элемент "path" содержит путь к конкретному файлу, из которого мы должны получить локации, а для "folders" каждый элемент "path" содержит путь к папке, и уже из этих папок выбираются файлы ".qsps", ".qsp-txt", ".txt-qsp".

-Пути-

Элементы "start","build" и "path" должны содержать абсолютные или относительные пути к файлам или папкам.

Относительные пути обсчитываются относительно расположения файла "project.json" и записываются по следующим правилам:

1. Разделителем между папками/файлами в пути выступает обратный слэш, однако он должен быть проэкранирован дублированием:

	"lib\\easy.dialog\\mod.qsp"

2. Путь не должен начинаться с разделителя (двойной обратный слэш):

	"lib\\easy.dialog\\mod.qsp" — так писать можно
	"\\lib\\easy.dialog\\mod.qsp" — так писать нельзя

3. Указание на текущую папку (в которой лежит "project.json") производится через точку:

	"." - текущая папка

4. Допускается указание текущей папки через точку и относительный путь от этой папки:

	".\\lib" — вложенная в текущую папку папка "lib". Равносильно такой записи:
	"lib"

5. Используя две точки можно указать папку выше текущей:

	".." — папка, в которую вложена текущая

