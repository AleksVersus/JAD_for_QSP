QSP-Game интерпретатор динамических конструкций
$[0]	&	!@ исходный динамический текст
$[1]	&	!@ дополнительные данные
поддерживаемые теги
[th: :th]
[tm: :tm]
[td: :td]
[ty: :ty]
# int.din.text
local $dyn_txt_, $cmd_ = $args[0], $args[1]
local $sup_, $new_txt_, $tag_, $string_, $temp_
loop while 1:
	!@ проверка на наличие динамических конструкций
	if $strfind($dyn_txt_,'<DIN(\d+):[\s\S]*?:\1DIN>') <> '':
		loop $sup_ = $dyn_txt_ while 1:
			!@ получаем строку, в которой должен присутствовать <DIN1::1DIN>
			$sup_ = $strfind($sup_, '<DIN(\d+):[\s\S]*?:\1DIN>')
			if $sup_ <> "":
				!@ если подобная строка получена, убираем концы
				$sup_['last'] = $sup_	&	!@ запоминаем, как выглядела строка до отбрасывания концов
				$sup_ = $strfind($sup_, '<DIN(\d+):([\s\S]*?):\1DIN>', 2)
				!@ когда концы убраны, проверяем вновь
			else:
				!@ если подобная строка больше не получена, значит найденная строка - искомая(самый внутренний уровень)
				$sup_['new'] = @int.DIN($sup_['last'])	&	!@ выполняем динамический код строки
				!@ заменяем в исходном тексте вычлененную строку на результат
				$dyn_txt_ = $replace($dyn_txt_, $sup_['last'], $sup_['new'])
				jump 'break'
			end
		end
		:break
	elseif $strfind($dyn_txt_, '\[(\D+)\][\s\S]*?\[\/\1\]') <> '':
		$new_txt_ = $strfind($dyn_txt_, '\[(\D+)\][\s\S]*?\[\/\1\]')	&	!@ получаем тегированную строку
		$tag_ = $strfind($dyn_txt_, '\[(\D+)\][\s\S]*?\[\/\1\]', 1)	&	!@ получаем тег
		$string_ = @em.tag.getCont($new_txt_, $tag_)	&	!@ извлекаем строку из тегов
		!@ внимание. Далее следует рекурсивное обращение к текущей локации !@ 	!*pl 'Уровень рекурсии: <<args[1]>>'
		!@ *pl 'Строка без тегов: '+$string_
		if $strfind($string_+'[/'+$tag_+']', '\[(\D+)\][\s\S]*?\[\/\1\]') <> '':
			!@ *pl 'Поскольку текущая строка содержит вложенный тег, вызываем процедуру снова.'
			$temp_['et'] = '<<$string_>>[/<<$tag_>>]'
			$temp_['new_str'] = $replace($new_txt_, $temp_['et'], @int.din.text($temp_['et'], args[1]))
			$dyn_txt_ = $replace($dyn_txt_, $new_txt_, $temp_['new_str'])
			$new_txt_ = $temp_['new_str']
			!@ *pl 'полученная строка: '+$new_txt_
		end
		$dyn_txt_ = $replace($dyn_txt_,$new_txt_,@int.DIN($new_txt_))
	elseif $strfind($dyn_txt_,'\([^([]*?\/\/[^])]*?\)') <> '':
		$new_txt_ = $strfind($dyn_txt_,'\([^([]*?\/\/[^])]*?\)')
		$temp_['sex'] = @em.tag.getNum($cmd_, 'sex')
		$dyn_txt_ = $replace($dyn_txt_,$new_txt_,@int.DIN($new_txt_, $temp_['sex']))
	elseif $strfind($dyn_txt_,'(\+{2,4})[^+]+(\+?[^+]+)*\1')<>'':
		$sup_['last'] = $strfind($dyn_txt_,'(\+{2,4})[^+]+(\+?[^+]+)*\1')	&	!@ запоминаем, как выглядит разбираемая строка
		$new_txt_ = @int.DIN($sup_['last'])
		$dyn_txt_ = $replace($dyn_txt_,$sup_['last'],$new_txt_)
	elseif $strfind($dyn_txt_,'(={2,4})[^=]+(=?[^=]+)*\1') <> '':
		$sup_['last'] = $strfind($dyn_txt_,'(={2,4})[^=]+(=?[^=]+)*\1')	&	!@ запоминаем, как выглядит разбираемая строка
		$new_txt_ = @int.DIN($sup_['last'])
		$dyn_txt_ = $replace($dyn_txt_,$sup_['last'],$new_txt_)
	else:
		$result = $replace($dyn_txt_,'--','—')
		exit
	end
end
--- int.din.text ---------------------------------