QSP-Game Локация обрабатывает гиперссылку поднятия предмета
Если есть тег [respawn:] и текущее время превышает время респауна, в kolvo_array восстанавливается количество из тела ссылки.
Ссылку с таким тегом невозможно удалить с текущей локации.
$[0] - id ссылки
# int.link.obj
local $link_id_ = $args[0]
local pos_, $link_body_, $link_objs_, $daughters_
pos_ = arrpos('$id_array',$link_id_)	&	!@ получаем позицию ссылки в базе
$link_body_ = $object_array[pos_]	&	!@ получаем тело ссылки
if kolvo_array[pos_] = 0:
	!@ kolvo_array[] - используется в качестве метки респавна. 0 - означает, что можно респавнить объект
	!@ спавн представляет собой следующее:
	!@ Все дочерние объекты ссылки удаляются
	@del.obj($link_id_, 'not parent')
	!@ генерируются новые объекты
	!@ внимание: для генерации объектов, не внесённых в базу, используйте короткое слово пустого объекта [:?:]
	$link_objs_ = $trim(@em.tag.getCont($link_body_, 'obj'))	&	!@ получаем все объекты, какие есть в ссылке
	!@ начинаем генерацию объектов
	loop local i, $io_, $t = 1, '', '' while $strfind($link_objs_, '\[io[\d]+:[\s\S]*:io[\d]+\]') <> '' and i<999 step i += 1:
		!@ пока в строке присутствует запись \[io[\d]+:[\s\S]*:io[\d]+\] делаем
		$io_ = @em.tag.getCont($link_objs_, "io<<i>>")	&	!@	вычленяем тело объекта
		t['num'] = DYNEVAL($func('em.tag.getCont', $io_, 'kolvo'))	&	!@	получаем количество
		t['chrg'] = DYNEVAL($func('em.tag.getCont', $io_, 'hapj'))	&	!@	получаем заряд. Помните: если не указать заряд, он будет равным максимальному значению для предмета или 0
		$t['dyn'] = @em.tag.getCont($io_, 'dynamic')	&	!@ получаем динамический код. Подробнее смотри в спецификации
		$t['for_base'] = $replace($io_, $strfind($io_,'\[kolvo:[\s\S]*:kolvo\]'))	&	!@ удаляем количество из тела
		$t['for_base'] = $replace($t['for_base'], $strfind($io_, '\[hapj:[\s\S]*:hapj\]'))	&	!@ удаляем заряд из тела
		$t['for_base'] = $replace($t['for_base'], $strfind($io_, '\[dynamic:[\s\S]*:dynamic\]'))	&	!@ удаляем заряд из тела
		$t['r'] = @base.new.obj($t['for_base'], '', $link_id_, t['num'], t['chrg'], $t['dyn'])	&	!@ добавляем новый объект
		$link_objs_ = $trim($replace($link_objs_, "[io<<i>>:<<$io_>>:io<<i>>]"))	&	!@ вырезаем из списка исходников обработанный исходник
	end
	kolvo_array[pos_]=1	&	!@ объекты респавнились
end
local $temp_iliob_
$daughters_ = @get.daughter.obj($link_id_, '', '$temp_iliob_')	&	!@ получаем список дочерних объектов ссылки
if $daughters_ = 'true':
	!@ если дочерние объекты у ссылки существуют
	!@ поочерёдно поднимаем каждый из них
	dynamic {
		local i, $take_
		i = arrsize('$temp_iliob_')
		loop while arrsize('$temp_iliob_')>0:
			!@ -----------здесь будет проверка на удачу и всё такое----------
			
			!@ -----------здесь будет проверка на удачу и всё такое----------
			$take_ = @take.obj($temp_iliob_[0])
			!@ В результате получаем одно из ключевых слов, но нас интересует только одно
			!@ если объект взят полностью уменьшаем args['i']
			if $take_ = 'taken': i -= 1
			killvar '$temp_iliob_',0
		end
		if i = 0: kolvo_array[pos_]=2
	}
else
	!@ в случае, когда дочерних объектов у ссылки нет, выставляем метку
	kolvo_array[pos_]=2
	!@ однако такая ситуация теоретически невозможна, поэтому необходимо пополнить лог ошибок
	$error_log += 'location name: "int.link.obj" ERROR!: Link do not have a daughter.<br>'
end
@true.goto.curloc($curloc)
--- int.link.obj ---------------------------------