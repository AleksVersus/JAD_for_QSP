QSP-Game

календарь выставляет текущие значения времени. Не влияет на работу других скриптов обсчитывающих время.
$[0]	&	!	расходуемое время
! ------------------------ календарь ------------------------	
	time['sec']		=	time['sec']		&	!	для удобства в каждой минуте принято по сто секунд. Секунды не используются в игре, как времяопределение 10
	time['minute']	=	time['minute']	&	!	текущее время в минутах
	time['hour']	=	time['hour']	&	!	текущее время в часах
	time['day']		=	time['day']		&	!	текущее время в днях (365/366)
	time['date']	=	time['date']	&	!	текущая дата 
	time['weekday']	=	time['weekday']	&	!	текущий день недели
	time['month']	=	time['month']	&	!	номер текущего месяца
	time['year']	=	time['year']	&	!	номер текущего года
	$time['last.all']=$func('get.time.now')

! Календарь может быть изменён в соответствии с требованиями игры. Для этого следует отредактировать текущую локацию
! и локацию summ.time

# int.time.calendar
local $wasted_time_ = $args[0]
local $last_time_, $new_time_, weekday_add_, add_
$last_time_ = @get.time.now()
$new_time_ = @summ.time($last_time_, $wasted_time_)
	time['sec']		=	@em.tag.getNum($new_time_, 'secunde')
	time['minute']	=	@em.tag.getNum($new_time_, 'minute')
	time['hour']	=	@em.tag.getNum($new_time_, 'hour')
	time['day']		=	@em.tag.getNum($new_time_, 'day')
	weekday_add_	=	@em.tag.getNum($new_time_, 'week')
	time['year']	=	@em.tag.getNum($new_time_, 'year')
	$time['hour.onClock'] = @time.output.addition(time['hour'])
	$time['minute.onClock'] = @time.output.addition(time['minute'])
!@ вычисляем день недели
time['weekday'] = (time['weekday'] + weekday_add_) mod 7
!@ Вычисляем дату. Дата определяется простым способом - по номеру дня в году.
if time['year'] mod 4 = 0: add_=1
if time['day']>-1 and time['day']<31:
	time['month']=1
	time['date']=time['day']+1
elseif time['day']>30 and time['day']<59+add_:
	time['month']=2
	time['date']=time['day']-30
elseif time['day']>58+add_ and time['day']<90+add_:
	time['month']=3
	time['date']=time['day']-(58+add_)
elseif time['day']>89+add_ and time['day']<120+add_:
	time['month']=4
	time['date']=time['day']-(89+add_)
elseif time['day']>119+add_ and time['day']<151+add_:
	time['month']=5
	time['date']=time['day']-(119+add_)
elseif time['day']>150+add_ and time['day']<181+add_:
	time['month']=6
	time['date']=time['day']-(150+add_)
elseif time['day']>180+add_ and time['day']<212+add_:
	time['month']=7
	time['date']=time['day']-(180+add_)
elseif time['day']>211+add_ and time['day']<243+add_:
	time['month']=8
	time['date']=time['day']-(211+add_)
elseif time['day']>242+add_ and time['day']<273+add_:
	time['month']=9
	time['date']=time['day']-(242+add_)
elseif time['day']>272+add_ and time['day']<304+add_:
	time['month']=10
	time['date']=time['day']-(272+add_)
elseif time['day']>303+add_ and time['day']<334+add_:
	time['month']=11
	time['date']=time['day']-(303+add_)
elseif time['day']>333+add_ and time['day']<365+add_:
	time['month']=12
	time['date']=time['day']-(333+add_)
end
$time['new.all']=$func('get.time.now')
--- int.time.calendar ---------------------------------

!@ получает текущее состояние времени в приемлемом виде
# get.time.now
$result="[year:<<time['year']>>] [day:<<time['day']>>] [hour:<<time['hour']>>] [minute:<<time['minute']>>] [secunde:<<time['sec']>>]"
--- get.time.now ---------------------------------

!@ Сравнение двух временнЫх значений. Используется год, день в году, час, минута секунда
$[0]	&	!@	первое значение. Как правило отличное от текущего
$[1]	&	!@	второе значение. Если не указано, сравнивается с текущим временем.
# sim.time
local $first_time_, $second_time_ = $args[0], $args[1]
local $time_arr_, time_
$time_arr_[0] = 'year'
$time_arr_[1] = 'day'
$time_arr_[2] = 'hour'
$time_arr_[3] = 'minute'
$time_arr_[4] = 'sec'
if $second_time_ = '':
	time_['sec']	=	time['sec']	&	!@	для удобства в каждой минуте принято по сто секунд. Секунды не используются в игре, как времяопределение 10
	time_['minute']	=	time['minute']	&	!@	текущее время в минутах
	time_['hour']	=	time['hour']	&	!@	текущее время в часах
	time_['day']	=	time['day']		&	!@	текущее время в днях (365/366)
	time_['year']	=	time['year']	&	!@	номер текущего года
else:
	time_['sec']	=	@em.tag.getNum($second_time_,'secunde')
	time_['minute']	=	@em.tag.getNum($second_time_,'minute')
	time_['hour']	=	@em.tag.getNum($second_time_,'hour')
	time_['day']	=	@em.tag.getNum($second_time_,'day')
	time_['year']	=	@em.tag.getNum($second_time_,'year')
end
time_['sec.new']	=	@em.tag.getNum($first_time_,'secunde')
time_['minute.new']	=	@em.tag.getNum($first_time_,'minute')
time_['hour.new']	=	@em.tag.getNum($first_time_,'hour')
time_['day.new']	=	@em.tag.getNum($first_time_,'day')
time_['year.new']	=	@em.tag.getNum($first_time_,'year')

loop local i = 0 while i < arrsize($time_arr_) step i += 1:
	if time_[$time_arr_[i]+'.new'] < time_[$time_arr_[i]]:
		$result = 'second'
		exit
	elseif time_[$time_arr_[i]+'.new'] > time_[$time_arr_[i]]:
		$result = 'first'
		exit
	end
end	
$result = 'similar'
--- sim.time ---------------------------------
результатом являются три слова: 
'first' - больше первое значение
'second' - больше второе значение
'similar' - одинаковые значения

QSP-Game локация суммирует время
! ВНИМАНИЕ!!!
! Локация производит суммирование времени как числовых величин. Каждое значение является всего лишь специфическим разрядом.
! поэтому в результате будут не
! первый день первого года, а 0 дней 0 лет! Когда истечёт 24 часа, будет 0 лет 1 день 00 часов 00 минут. Учитывайте это при использовании.
! Високосные годы считаются правильно. Ничего не сдивнуто. 0 лет - означает минус первый год отсчёта. 1 год - означает первый год отсчёта, равно как и "с момента отсчёта прошёл один год"
! $[0] ... $[8] - временнЫе промежутки в формате [year:ABC] [day:XYZ] [hour:DE] [minute:FJ] [secunde:NM]
! результатом работы функции является временной промежуток в формате [year:ABC] [day:XYZ] [hour:DE] [minute:FJ] [secunde:NM]
! в некотором роде функция дублирует схему работы календаря. Поэтому она, как и календарь должна подгоняться под текущие нужды игры.
! дополнительный тег, позволяющий вычислить значение до указанного разряда, передаётся в нулевом аргументе
! <sec> - секунды <min> - минуты <hour> - часы <day> - дни
# summ.time
local res_, add_, time_, $time_

res_['year']=@em.tag.getNum($args[0],'year')
res_['day']=@em.tag.getNum($args[0],'day')
res_['hour']=@em.tag.getNum($args[0],'hour')
res_['minute']=@em.tag.getNum($args[0],'minute')
res_['secunde']=@em.tag.getNum($args[0],'secunde')

loop local i = 1 while i < arrsize('$args') step i += 1:
	add_['year']+=@em.tag.getNum($args[i],'year')
	add_['day']+=@em.tag.getNum($args[i],'day')
	add_['hour']+=@em.tag.getNum($args[i],'hour')
	add_['minute']+=@em.tag.getNum($args[i],'minute')
	add_['secunde']+=@em.tag.getNum($args[i],'secunde')
end

	time_['sec'] = res_['secunde']+add_['secunde'] &	!@	расчётные секунды
	time_['+minute'] = time_['sec']/100			 &	!@	добавочные минуты. Добавляются к текущему значению минут
	res_['secunde'] = time_['sec'] mod 100		 &	!@	значение секунд выставляется остатком от деления
	!@ Вычисляем значение минут
	time_['minute'] = res_['minute']+add_['minute']+time_['+minute']	&	!	расчётные минуты
	time_['+hour'] = time_['minute']/60							&	!	добавочные часы
	res_['minute'] = time_['minute'] mod 60				&	!	минуты в действительное значение
	!@ вычисляем значение часов
	time_['hour'] = res_['hour']+add_['hour']+time_['+hour']
	time_['+day'] = time_['hour']/24
	res_['hour'] = time_['hour'] mod 24
	
	!@ расчёт текущего дня в году.
	!@ Дни нумеруются с нулевого по последний (так же как и часы и минуты) Нулевой день - это первое января.
	!@ Расчёт можно выполнить циклически с помощью вычитания. Т.е. сколько раз прогнался цикл, столько лет набежало.
	!@ подсчитываем количество високосных лет циклом
	!@	i просто счётчик, использующийся для подсчёта количества лет
	!@	j запоминаем текущий год, чтобы не свихнуть календарь раньше срока
	loop local i, j = add_['year'], res_['year'] while i > 0 step i -= 1 & j += 1:
		!@ если год високосный, добавляем к количеству високосных лет
		if @get.leapYear(j) = 'true': time_['year.+day'] += 1
	end

	time_['past.day'] = add_['year'] * 365 + time_['year.+day']
	!@ расчётное количество дней после потраченного:
	time_['day'] = res_['day'] + add_['day'] + time_['+day'] + time_['past.day']
	!@ цикл
	loop while 1:
		if @get.leapYear(res_['year']) = 'true' and time_['day'] => 366:
			!@ если значение дней достигло 366 (т.е. прошло 366 дней) високосного года
			res_['year'] += 1
			time_['day'] -= 366
		elseif time_['day'] => 365:
			!@ если значение дней достигло 365
			res_['year'] += 1
			time_['day'] -= 365
		else:
			jump 'break'
		end
	end
	:break

	res_['day'] = time_['day']

if res_['year'] <> 0: $time_['sum.time']+='[year:'+$str(res_['year'])+'] '
if res_['day'] <> 0: $time_['sum.time']+='[day:'+$str(res_['day'])+'] '
if res_['hour'] <> 0: $time_['sum.time']+='[hour:'+$str(res_['hour'])+'] '
if res_['minute'] <> 0: $time_['sum.time']+='[minute:'+$str(res_['minute'])+'] '
if res_['secunde'] <> 0: $time_['sum.time']+='[secunde:'+$str(res_['secunde'])+']'
if time_['+day'] + add_['day'] + time_['past.day'] <> 0: $time_['sum.time'] += ' [week:'+$str(time_['+day'] + add_['day'] +time_['past.day']) + ']'
$result = $time_['sum.time']
--- summ.time ---------------------------------

QSP-Game проверка года на високосность
args[0] = args[0]	&	!	аргумент, переданный локации, номер года, високосность, которого хотим проверить
# get.leapYear
!@ Если високосность года определяется иным образом, измените эту локацию.
$result = $iif(((args[0] mod 4 = 0) and (args[0] mod 100 <> 0)) or (args[0] mod 400=0), 'true', 'false')
!@ если номер года кратен четырем и не кратен 100, или кратен 400, он считается високосным
--- get.leapYear ---------------------------------

!@ приводит время к наименьшему указанному в строке разряду.
!@ внимание, конвертация лет считается от текущего значения времени, если не указано иное
$[0]	&	!	приводимое время
$[1]	&	!	к чему нужно привести day hour minute secunde
[2] !@ год, от которого считаются добавочные дни (+1 на каждый високосный)
# conv.time
local $conv_time_, $conv_to_, from_year_ = $args
local res_, add_day_, time_
if from_year_ = 0: from_year_ = time['year']
time_['day']=@em.tag.getNum($conv_time_,'day')
time_['year']=@em.tag.getNum($conv_time_,'year')
time_['hour']=@em.tag.getNum($conv_time_,'hour')
time_['minute']=@em.tag.getNum($conv_time_,'minute')
time_['secunde']=@em.tag.getNum($conv_time_,'secunde')
!@ вычисляем количество дней 
loop local i = from_year_ while i < from_year_ + time_['year'] step i += 1:
	if i mod 4 = 0: add_day_ += 1
end
res_['day']=time_['year']*365+time_['day']+add_day_
res_['hour']=res_['day']*24+time_['hour']
res_['minute']=res_['hour']*60+time_['minute']
!@ максимальное значение при вычислении минут: 4082 года 283 дня 2 часа 7 минут
res_['secunde']=res_['minute']*100+time_['secunde']
!@ максимальное значение при вычислении секунд: 40 лет 302 дня 1 час 56 минут 47 секунд
if $conv_to_ = 'day':
	res_['day']+=time_['hour']/24
	time_['minute']+=(time_['hour'] mod 24)*60
	res_['day']+=time_['minute']/1440
	time_['secunde']+=(time_['minute'] mod 1440)*100
	res_['day']+=time_['secunde']/144000
	res_['secunde']=(time_['secunde'] mod 144000)
	$result="[day:<<res_['day']>>]"
elseif $conv_to_ = 'hour':
	res_['hour']+=time_['minute']/60
	time_['secunde']+=(time_['minute'] mod 60)*100
	res_['hour']+=time_['secunde']/6000
	res_['secunde']=(time_['secunde'] mod 6000)
	$result="[hour:<<res_['hour']>>]"
elseif $conv_to_ = 'minute':
	res_['minute']+=time_['secunde']/100
	res_['secunde']=(time_['secunde'] mod 100)
	$result = "[minute:<<res_['minute']>>]"
end
if res_['secunde'] <> 0: $result += "[secunde:<<res_['secunde']>>]"
--- conv.time ---------------------------------