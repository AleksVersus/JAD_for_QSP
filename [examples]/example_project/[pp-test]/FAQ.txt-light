==Небольшой FAQ по препроцессору==

=Разный набор функций для разных проектов=
В:

Это первый вопрос, который возник у меня, как у автора препроцессора. У меня есть модуль-библиотека "easy.math.qsp" со множеством функций. Во всех проектах этот модуль подключается таким образом:

```python
{
	"project":
	[
		{...},
		{
			"build":"..\\example_game\\lib\\easy.math.qsp",
			"folders":
			[
				{
					"path":"[lib]\\easy.math"
				}
			]
		},
		{...}
	],
	"start":"..\\",
	"converter":"txt2gam.exe",
	"player":"qspgui.exe",
	"preprocessor":"On"
}
```

Однако не во всех проектах используется весь набор функций из этого модуля. Хочу, чтобы для каждого отдельного проекта подтягивался свой собственный набор функций, а так же, чтобы я мог собирать библиотеку, как отдельный проект, со всеми возможными функциями.

Что я сделал в первую очередь. Для каждой локации, которая в библиотеке является функцией, я завёл условие типа такого:

```qsp
!@pp:if(em_maxVar):include
# em.maxVar
! это функция в библиотеке easy.math
	$result="код функции"
-
!@pp:endif
```

Теперь, в самом первом файле любого проекта мне достаточно определить метку этой функции, и функция будет добавлена в конечный файл библиотеки "easy.math.qsp", собираемый вместе со сторонним проектом.

```qsp
# start
! это самая первая локация в собираемом проекте,
! файл с этой локацией лежит в корне проекта игры, поэтому здесь
! удобнее всего назначать метки
!@pp:var(em_maxVar)
addqst 'easy.math.qsp'
-
```

Однако, поскольку все метки глобальны для всего проекта, я не могу проделать то же самое с самой первой локацией библиотеки "easy.math.qsp", чтобы когда я собираю библиотеку, как отдельный проект, все функции были подключены, ведь самая первая локация библиотеки "easy.math.qsp" находится в файле, который так же обрабатывается препроцессором из сторонних проектов. Как добиться того, чтобы метки в этом файле определялись только если я собираю "easy.math.qsp", как отдельный проект?

О:

На самом деле всё довольно просто. В самом первом обрабатываемом билдером файле библиотеки "easy.math.qsp", грубо говоря в самой первой локации, нужно перечислить команды для определения меток. А сами эти команды обернуть в условие, которое будет отключать препроцессинг при верности условия. Например:

```qsp
# !easy.math!
! самая первая локация в библиотеке,
! файл с этой локацией лежит в корне проекта библиотеки
!@pp:if(build_easy_math==Off):nopp
! если для метки build_easy_math определено значение Off,
! дальнейшие строки не будут обрабатываться препроцессором
! а значит, ни одна метка не определится
!@pp:var(em_maxVar)
!@pp:var(...)
!@pp:endif
if $args[0]="":
	"easy.math v 2.3.0 для QSP 5.7.0"	
elseif $args[0]='version':
	result=2300
end
--- !easy.math! ---
```

Теперь в самом первом обрабатываемом билдером файле любого другого проекта, нужно просто определить значение метки "build_easy_math" как "Off", и на локации "!easy.math!" все метки, отвечающие за включение в конечный файл функций определяться не будут.

```qsp
# start
! это самая первая локация в собираемом проекте,
! файл с этой локацией лежит в корне проекта игры, поэтому здесь
! удобнее всего назначать метки
!@pp:var(build_easy_math=Off)
!@pp:var(em_maxVar)
addqst 'easy.math.qsp'
-
```