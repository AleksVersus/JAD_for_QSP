//	ВНИМАНИЕ !!! В файле JSON не должно быть комментариев. Удалите все комментарии перед использованием

// описание с учётом терминологии python.
// В фигурных скобках идёт содержимое словарей, типа "ключ1":"значение1","ключ2":"значение2","ключ3":"значение3"
	// "ключ" - только текстовое значение
	// "значение" - может быть непосредственно текстовое или числовое значение, объект, словарь, список
// В квадратных скобках идёт список, типа "объект1","объект2","объект3"
	// через запятую перчисляются текстовые или числовые значения, объекты, словари, списки и т.д.

{	// корневой элемент (словарь), ключ - "project", а значением является список
	"project":
	[	// в списке размещаем однотипные элементы, которые и описывают порядок сборки

		{	// каждый элемент в списке "project" будет представлять собой словарь
			"build":"game.qsp", // в корневой папке должен получиться данный файл
			"folders": // перечисляем, из каких папок брать файлы для сборки, снова список:
			[
				{
					"path": ".", // указана текущая папка относительно файла проекта
				},
				{
					"path": "D:\\my\\projects\\Вопросы", // здесь указан абсолютный путь к папке
				},
				{
					"path": "projects\\Вопросы", // здесь указан путь относительно папки проекта, т.е. файлы ищутся в подпапке project\Вопросы относительно текущей папки.
				} // внимание! недопустимо заканчивать список запятой!!!!
			],
			"files": // или/и перечисляем, какие файлы брать для сборки
			[
				{
					"path":"D:\\my\\projects\\01_меню.qsp-txt",
				},
				{
					"path":"game.qsp-txt",
				}
			]
		},
		{	// каждый элемент в списке "project" будет представлять собой словарь
			"build":"lib\\drive.qsp", // файл появится во вложенной папке lib
			"folders": // перечисляем, из каких папок брать файлы для сборки
			[
				{
					"path": "..\\..\\old_proj\\lib", // поднимаемся на две папки вверх относительно папки проекта и входим в папку old_proj\lib и уже оттуда подбираем файлы.
				}
			],
			"files": // или/и перечисляем, какие файлы брать для сборки
			[
				{
					"path": "old-lib\\easy.math.old.qsps"
				},
				{
					"path": "old-lib\\easy.dialog.old.txt-qsp"
				}
			],
			// подключаем скрипты, которые выполнятся после сборки промежуточного TXT2GAM файла
			// исключительно для данного билда
			"postprocessors":["old-lib\\simplename_for_func.py"]
		}
	],
	// данный элемент представляет собой команду запуска
	// запускает указанный файл после сборки
	"start":"game.qsp",
	// два следующих элемента указывают пути до конвертера TXT2GAM и плеера, в котором необходимо запускать собранный файл
	// лучше указывать абсолютный путь
	"converter":"D:\\my\\GameDev\\QuestSoftPlayer\\QSP 570 QG 400b\\txt2gam.exe",
	"player":"D:\\my\\GameDev\\QuestSoftPlayer\\QSP 570 QG 400b\\qspgui.exe",
	// ещё один аргумент. Если выставлено "True", промежуточные файлы TXT2gam сохраняются
	"save_txt2gam":"True",
	// включаем обработку всех файлов проекта препроцессором
	"preprocessor":"On",
	// подключаем скрипты, которые должны выполниться для всех промежуточных файлов TXT2GAM проекта после сборки
	"postprocessors":["..\\example_postprocessor\\scripts\\renamemass.py"],
	// сложный параметр scans нужен для встраивания в игру особой локации, на которой присутствует список
	// всех подтянутых из папок файлов
	"scans": {
		// предпочтительное название локации. Можно не указывать, тогда локация будет называться prvFile
		"location":"название локации",
		// список папок, файлы из которых нужно просканировать. Пути указываются относительно файла project.json
		// однако на локации пути будут выставлены относительно файла, указанного в параметре "start"
		"folders":[
			"..\\example_game\\res\\img\\diary",
			"..\\example_game\\res\\img\\drive",
			"..\\example_game\\res\\img\\ico",
			"..\\example_game\\res\\img\\obj"
		],
		// так же можно задать список отдельных файлов, подтягиваемых в эту же локацию, хотя зачем?
		"files":[
			"..\\example_game\\res\\img\\scl\\scale-green-leo.bmp",
			"..\\example_game\\res\\img\\scl\\scale-space-leo.bmp",
			"..\\example_game\\res\\img\\scl\\scl.rainbow.gif"
		]
	}
}