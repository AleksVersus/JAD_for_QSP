%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
#
# Quest Soft Player 5.8.0 Language:
# https://qsp.org/

name: QSP # название языка
file_extensions: # расширения файлов
  - qsps
  - qsp-txt
  - txt-qsp
first_line_match: (^(?i:qsp-game)$|^(?i:qsp-game\s+.*)$)
scope: source.qsp
version: 2
# TODO: если возможно попытаться вынести часть подсветки в qsp_locations и расширить с помощью текущей подсветки, или наоборот
# extends: # можно расширить уже имеющуюся синтаксическую подсветку 
variables: # назначаем переменные для удобства
  # qsp_declarators: |- # keyword.declaration.qsp
  #   (?ix:
  #     set|let|local
  #   )
  kw_operators: |- # keyword.operator
    (?ix:
      inclib|freelib|addqst|killqst|openqst|opengame|savegame|
      addobj|delobj|killobj|unsel|unselect|
      cls|
      cla|delact|
      cmdclr|cmdclear|
      play|close|all|
      jump|dynamic|goto|gt|xgoto|xgt|gosub|gs|menu|exit|
      showobjs|showstat|showacts|showinput|refint|
      copyarr|killvar|killall|
      view|msg|
      settimer|wait|
      exec
    )
  kw_controls: (?i:act|if|elseif|else|loop|while|step|end) # keyword.control
  kw_text_operators: (?i:pl?|nl|clr|clear) # keyword.operator
  system_vars_num: (?i:nosave|disablescroll|disablesubex|debug|usehtml|(b|f|l)color|fsize)
  system_vars_string: (?i:counter|ongload|ongsave|onnewloc|onactsel|onobjsel|onobjadd|onobjdel|usercom|fname|backimage)
  system_vars: (?i:args|result)
  functions_num: |- # variable.function
    (?ix:
      loc|obj|isnum|isplay|
      len|val|instr|strcomp|strpos|
      arrsize|arrpos|arrcomp|
      msecscount|
      rgb|
      countobj|
      r(a)?nd
    )
  functions_string: |- # variable.function
    (?ix:
      desc|user_text|usrtxt|maintxt|stattxt|
      curloc|selobj|selact|
      mid|(u|l)case|trim|replace|str|strfind|
      input|
      qspver|
      curacts|
      getobj
    )
  functions_both_type: (?i:iif|dyneval|func|max|min|arritem) # variable.function
  braces_open: '\{'
  braces_close: '\}'
  quote: '"'
  ap: "'"
  opener: '{{braces_open}}{{quote}}{{ap}}'
  closer: '{{braces_close}}{{quote}}{{ap}}'
  left_operand: '({{quote}}|{{ap}}|\)|\}|\$|\w|\d)'
  right_operand: '({{quote}}[^{{quote}}]*|{{ap}}[^{{ap}}]*|\([^\)]*?|\{|(\$?|-?)\w+?|-?\d+?|\@)'
  nr: (\n\r|\r|\r\n|\n)
  operacion_two_signs: (<=|>=|\+=|-=|\*=|\/=|<>)
  operacion_one_sign: (\+|-|<|>|=|\/|\*|!)
  operacion_word: (?i:and|or|mod)
  users_variables: (\$?[A-Za-zА-Яа-я_][\w\.]*)

contexts: # теперь необходимо определить "контексты" подсветки
  main: # обязательный контекст main, с него стартует распознавание синтаксиса
    - match: "" # совпадения не ищутся
      push: # всё вытесняется подсветкой
        - include: preprocessor
        - match: ".*" # любое множество символов подсвечивается как комментарий
          scope: meta.diff meta.gametext.qsp # TODO: заменить meta.diff на comment.block, когда сделаю сниппеты в плагинах
      with_prototype:
        - match: ^(\s*?)(#)\s?(.+)$
          captures:
            2: keyword.declaration.location.qsp
            3: entity.name.location.qsp meta.start_location.qsp
          push:
            - meta_scope: meta.location.qsp
            - match: ^\1(-)(.*?)$
              pop: true
              captures:
                1: punctuation.definition.keyword markup.bold.qsp keyword.control meta.end_location.qsp
                2: markup.heading # TODO: насколько верно такое определение от заголовков разделов, так как по сути это комментарий
            - include: locations
            - match: ^(\s*?)(-)(.*?)$
              scope: invalid.illegal.qsp meta.end_location.wrong.qsp

  locations:
    - include: figurebrack
    - include: actions
    - include: conditions
    - include: loop
    - include: kw_declarations
    - include: sugarfunc
    - match: (?i:(\bend\b)) # подсветка лишнего end'а
      scope: invalid.illegal.qsp
    - match: ^(?:\s*?)(?i:(\belse\b)) # лишний else
      scope: invalid.illegal.qsp
    - match: (?i:(\belseif\b)) # elseif работает только в многострочной форме (исправить, если изменится в 5.8.0)
      scope: invalid.illegal.qsp
    - include: preprocessor
    - include: comments
    - include: location_call
    - include: jump_to_label
    - include: labels
    - include: operators
    - include: operacion
    - include: system_variables
    - include: functions
    - include: numeric
    - include: strings
    - include: separator_continuation

  # Прыжок на метку
  jump_to_label:
    - match: (jump)(?=\s*($|&))
      scope: invalid.illegal.qsp
    - match: (jump)\s*(('|").*?\3)
      captures:
        1: keyword.operator.other.qsp avs_operators
        2: string.quoted.double.qsp label_to_jump.qsp

  # вызовы локаций
  location_call:
    - match: (goto|gt|xgoto|xgt|gosub|gs)(?=\s*($|&))
      scope: invalid.illegal.qsp
    - match: (goto|gt|xgoto|xgt|gosub|gs)\s*(('|").*?\3)
      captures:
        1: keyword.operator.other.qsp avs_operators
        2: string.quoted.double.qsp callable_locs.qsp
    - match: (func)(\()(('|").*?\4)
      captures:
        1: support.function.qsp
        3: string.quoted.double.qsp callable_locs.qsp

  # неявный вызов функций
  sugarfunc:
    - match: (\@)([\w\.\#]+)(?=\s*\()
      captures:
        1: punctuation.definition.function.qsp support.function.builtin.qsp
        2: variable.function.qsp markup.italic.qsp
    - match: (\@[\w\.\#]+\s+{{right_operand}})
      scope: invalid.illegal.qsp markup.italic.qsp
    - match: (\@)([\w\.\#]+)
      captures:
        1: punctuation.definition.function.qsp support.function.builtin.qsp
        2: variable.function.qsp markup.italic.qsp

  # действия
  actions:
    - match: '(?<=\{)(\s*?)(?i:(act))(?=\s*?.*?\:\s*?$)'
      scope: meta.begin_action.qsp
      captures:
        2: keyword.control.action.begin.qsp markup.italic.qsp
      push:
        - match: ^(\s*?)(?i:(\bend\s+?act\b|\bend\b))([^\&\}\n\r]*)
          scope: meta.end-action.qsp
          captures:
            2: keyword.control.action.end.qsp markup.italic.qsp
            3: comment.line.qsp markup.italic.qsp
          pop: true
        - include: wrongcloseinscope
        - include: wrongclose
        - include: locations
    - match: '^(\s*?)(?i:(act))(?=\s*?.*?\:\s*?$)'
      captures:
        2: keyword.control.action.begin.qsp markup.italic.qsp
      push:
        - match: ^(\s*?)(?i:(\bend\s+?act\b|\bend\b))([^\&\n\r]*)
          scope: meta.end-action.qsp
          captures:
            2: keyword.control.action.end.qsp markup.italic.qsp
            3: comment.line.qsp markup.italic.qsp
          pop: true
        - include: wrongclose
        - include: wrongcloseinscope
        - include: locations

  # циклы
  loop:
    - match: '(?<=\{)(\s*?)(?i:(\bloop\b))(?=.*?(?i:(\bwhile\b))\s\S.*?(?i:(\bstep\b))?\s*?.*?\:\s*?$)'
      scope: meta.begin_cycle.qsp
      captures:
        2: keyword.control.cycle.begin.qsp markup.italic.qsp
      push:
        - match: ^(\s*?)(?i:(\bend\s+?loop\b|\bend\b))([^\&\}\n\r]*)
          captures:
            2: keyword.control.cycle.end.qsp markup.italic.qsp
            3: comment.line.qsp markup.italic.qsp
          pop: true
        - include: wrongcloseinscope
        - include: wrongclose
        - include: locations
    - match: '^(\s*?)(?i:(\bloop\b))(?=.*?(?i:(\bwhile\b))\s\S.*?(?i:(\bstep\b))?\s*?.*?\:\s*?$)'
      scope: meta.begin_cycle.qsp
      captures:
        2: keyword.control.cycle.begin.qsp markup.italic.qsp
      push:
        - match: ^(\s*?)(?i:(\bend\s+?loop\b|\bend\b))([^\&\n\r]*)
          captures:
            2: keyword.control.cycle.end.qsp markup.italic.qsp
            3: comment.line.qsp markup.italic.qsp
          pop: true
        - include: wrongclose
        - include: wrongcloseinscope
        - include: locations
    - match: '(?i:(\bloop\b))(?!.*(?i:(\bwhile\b)))'
      scope: invalid.illegal.qsp

  # конструкции условий
  conditions:
    - match: '(?<=\{)(\s*?)(?i:(if))(?=\s*?.*?\:\s*?$)'
      captures:
        2: keyword.control.conditional.begin.qsp markup.italic.qsp
      push:
        - match: ^(\s*?)(?i:(\bend\s+?if\b|\bend\b))([^\&\}\n\r]*)
          captures:
            2: keyword.control.conditional.end.qsp markup.italic.qsp
            3: comment.line.qsp markup.italic.qsp
          pop: true
        - include: wrongcloseinscope
        - include: wrongclose
        - include: elseifelse
        - include: locations
    - match: '^(\s*?)(?i:(if))(?=\s*?.*?\:\s*?$)'
      captures:
        2: keyword.control.conditional.begin.qsp markup.italic.qsp
      push:
        - match: ^(\s*?)(?i:(\bend\s+?if\b|\bend\b))([^\&\n\r]*)
          captures:
            2: keyword.control.conditional.end.qsp markup.italic.qsp
            3: comment.line.qsp markup.italic.qsp
          pop: true
        - include: wrongclose
        - include: wrongcloseinscope
        - include: elseifelse
        - include: locations

  wrongclose:
    - match: ^\s*?(-)(.*)({{nr}}$|$)
      scope: invalid.illegal.qsp
      pop: true

  wrongcloseinscope:
    - match: \}(.*)({{nr}}$|$)
      scope: invalid.illegal.qsp avs.error avs.wrongelse1
      pop: true

  elseifelse:
    - match: ^(?i:\s*?\b(else)\b(\:?)\s*?)$ # правильный else
      captures:
        1: keyword.control.conditional.resume.qsp markup.italic.qsp
        2: punctuation.definition.keyword
    - match: ^\s*?(?i:(\belse\b))([^\:]*)(\:?)\s*?([^\n\r]*)$
      captures:
        1: keyword.control.conditional.resume.qsp markup.italic.qsp
        2: invalid.illegal.qsp
        3: keyword.control.conditional.resume.qsp markup.italic.qsp
        4: invalid.illegal.qsp
    - match: ^(?i:(?:\s*?)\belseif\b(?=\s+\S.*?\:\s*?{{nr}}))
      scope: keyword.control.conditional.resume-begin.qsp markup.italic.qsp
    - match: ^(?:\s*?)(?i:(\belseif\b))(\s+\S.*?\:\s*?[^\n\r]*)$
      captures:
        1: keyword.control.conditional.resume-begin.qsp markup.italic.qsp
        2: invalid.illegal.qsp

  # set и local
  kw_declarations:
      # ([A-Za-zА-Яа-я_][\w\.]*)
    - match: \b(?i:(local))\b(?=\s+{{users_variables}}(\[.*?\])?(\,\s*{{users_variables}}(\[.*?\])?)*(\s*\=\s*.+)?\s*(?i:(\&|{{nr}}|\}|\bwhile\b)))
      scope: keyword.declaration.variables.qsp
    - match: \b(?i:(set|let))\b(?=\s+{{users_variables}}(\[.*?\])?(\,\s*{{users_variables}}(\[.*?\])?)*(\s*\=\s*.+)\s*(?i:(\&|{{nr}}|\}|\bwhile\b)))
      scope: keyword.declaration.variables.qsp
    - match: \b(?i:set|local|let)\b
      scope: invalid.illegal.qsp

  # операции
  operacion:
    # подсветка словарных операторов
    - match: (?<={{left_operand}})\s*\b{{operacion_word}}\b(?!\s*?{{right_operand}})
      scope: invalid.illegal.qsp avs_wrong_word_with_out_right
    - match: (?<=^|\&|\(|\{|\[)\s*\b{{operacion_word}}\b(?=\s*?{{right_operand}}*)
      scope: invalid.illegal.qsp avs_wrong_word_with_out_left
    - match: \b{{operacion_word}}\b 
      scope: keyword.operator.word.qsp
    # подсветка двузнаковых операторов
    - match: (?<={{left_operand}})\s*?{{operacion_two_signs}}(?!\s*?{{right_operand}})
      scope: invalid.illegal.qsp avs_wrong_two_signs_with_out_right
    - match: (^\s*?|\&\s*?|\(\s*?|\{\s*?|\[\s*?)\K{{operacion_two_signs}}(?=\s*?{{right_operand}}*)
      scope: invalid.illegal.qsp avs_wrong_two_signs_with_out_left
    - match: (?<={{left_operand}})\s*?{{operacion_two_signs}}(?=\s*?{{right_operand}})
      scope: keyword.operator.two-signs.qsp
    # подсветка для однознаковых операторов
    - match: (?<={{left_operand}})\s*?{{operacion_one_sign}}(?!\s*?{{right_operand}})
      scope: invalid.illegal.qsp avs_wrong_one_sign_with_out_right
    - match: (^\s*?|\&\s*?|\(\s*?|\{\s*?|\[\s*?)\K{{operacion_one_sign}}(?=\s*?{{right_operand}}*)
      scope: invalid.illegal.qsp avs_wrong_one_sign_with_out_left
    - match: '{{operacion_one_sign}}'
      scope: keyword.operator.one-sign.qsp
    # Правила для запятых
    - match: (?<={{left_operand}})\s*?(,)(?!\s*?{{right_operand}})
      scope: invalid.illegal.qsp avs_wrong_comma_with_out_right
    - match: (^\s*?|\&\s*?|\(\s*?|\{\s*?|\[\s*?)\K(,)(?=\s*?{{right_operand}}*)
      scope: invalid.illegal.qsp avs_wrong_comma_with_out_left
    - match: (,)
      scope: punctuation.separator.comma.qsp
    # Правила для амперсандов
    - match: (^\s*?|\(\s*?|\{\s*?|\[\s*?)\K(\&)(?=\s*?{{right_operand}}*)
      scope: invalid.illegal.qsp avs_wrong_comma_with_out_left
    - match: \&
      scope: keyword.operator.ampersand.qsp
    # Правила для no
    - match: (?i:\bno\b)(?!\s*?{{right_operand}})
      scope: invalid.illegal.qsp avs_wrong_comma_with_out_left
    - match: (?i:\bno\b)
      scope: keyword.operator.word.qsp

  numeric:
    - match: \b\d+([A-Za-zа-яА-Я\$\._]+\d*)+\b # неправильные переменные, начинающиеся с цифр
      scope: invalid.illegal.qsp avs_wrong_numeric
    - match: \b[0-9]+\b
      scope: constant.numeric avs_numeric
    
  operators:
    # подсветка операторов
    - match: (\b({{kw_operators}}|{{kw_text_operators}})\b)(?!\()
      scope: keyword.operator.other.qsp avs_operators
    - match: (\b({{kw_operators}})\b)(?=\()
      scope: support.function.other.qsp avs_operators
    - match: (\*)(\b({{kw_text_operators}})\b)(?=\()
      captures:
        1: support.function.star.qsp punctuation.definition.function
        2: support.function.other.qsp avs_operators
    - match: (\*)(?={{kw_text_operators}}\b)
      scope: keyword.operator.star.qsp punctuation.definition.keyword avs_star
    - match: \b{{kw_controls}}\b
      scope: keyword.control.qsp markup.italic.qsp
    - match: (\*)(?={{kw_operators}}\b)
      scope: invalid.illegal.qsp avs_wrong_star_operators
    - match: (\*)(?={{kw_controls}}\b)
      scope: invalid.illegal.qsp avs_wrong_star_controls

  system_variables:
    - match: (?<!\$)(\b{{system_vars_string}}\b) # подсвечивает все системные переменные текстового типа без символа $
      scope: invalid.illegal.qsp avs_illegal_textvariables
    - match: (\$)(?=\b({{system_vars_string}}|{{system_vars}})\b)
      scope: variable.language.qsp punctuation.definition.variable avs_sysvar
    - match: \b({{system_vars_num}}|{{system_vars_string}}|{{system_vars}})\b
      scope: variable.language.qsp avs_sysvar
    - match: (\$)(?={{system_vars_num}}\b) # подсвечивает символ доллара перед названием числовых переменных
      scope: invalid.illegal.qsp avs_illegal_$

  functions:
    - match: (?<!\$)(\b{{functions_string}}\b) # подсвечивает все функции текстового типа без $
      scope: invalid.illegal.function.qsp avs_illegal_function
    - match: (\$)(?=({{functions_string}}\b|{{functions_both_type}}\b))
      scope: support.function.qsp punctuation.definition.function avs.function
    - match: \b({{functions_num}}|{{functions_string}}|{{functions_both_type}})\b
      scope: support.function.qsp avs_function
    - match: (\$)(?=\b{{functions_num}}\b) # подсвечивает символ доллара перед названием числовых переменных
      scope: invalid.illegal.qsp avs_illegal_function_$

  labels:
    - match: ^(\s*?\:|\:)([^&'"\n]+)
      captures:
        2: entity.name.qlabel.qsp avs_jumps_labels

  # # # ------------------- строки ------------------------ # # #
  strings:
    - match: '"'
      push:
        - meta_scope: string.quoted.double.qsp
        - match: '""'
          scope: constant.character.escape.qsp
        - match: '"'
          pop: true
        - include: preprocessor
        - include: subexpression
        - include: htmlsupport
    - match: "'"
      push:
        - meta_scope: string.quoted.double.qsp
        - match: "''"
          scope: constant.character.escape.qsp
        - match: "'"
          pop: true
        - include: preprocessor
        - include: subexpression
        - include: htmlsupport

  subexpression:
    - match: '<<'
      scope: punctuation.section.interpolation.begin.qsp avs_begin_subexpression
      push:
        - clear_scopes: true
        - meta_scope: meta.interpolation.qsp
        - meta_content_scope: source.qsp.embedded
        - match: '>>'
          scope: punctuation.section.interpolation.end.qsp avs_end_subexpression
          pop: true
        - include: subex

  subex:
    - include: figurebrack
    - match: (\n\r|\r|\r\n|\n)
      scope: invalid.illegal.qsp avs_wrongenter
    - include: operacion_subex
    - include: system_variables
    - include: functions
    - include: numeric
    - include: strings

  operacion_subex:
    # TODO: слить повторяющиеся определения для операций в подвыражениях и других
    # подсветка словарных операторов
    - match: (?<={{left_operand}})\s*\b{{operacion_word}}\b(?!\s*?{{right_operand}})
      scope: invalid.illegal.qsp avs_wrong_word_with_out_right
    - match: (?<=^|\&|\(|\{|\[)\s*\b{{operacion_word}}\b(?=\s*?{{right_operand}}*)
      scope: invalid.illegal.qsp avs_wrong_word_with_out_left
    - match: \b{{operacion_word}}\b 
      scope: keyword.operator.word.qsp
    # подсветка двузнаковых операторов
    - match: (?<={{left_operand}})\s*?{{operacion_two_signs}}(?!\s*?{{right_operand}})
      scope: invalid.illegal.qsp avs_wrong_two_signs_with_out_right
    - match: (^\s*?|\&\s*?|\(\s*?|\{\s*?|\[\s*?)\K{{operacion_two_signs}}(?=\s*?{{right_operand}}*)
      scope: invalid.illegal.qsp avs_wrong_two_signs_with_out_left
    - match: (?<={{left_operand}})\s*?{{operacion_two_signs}}(?=\s*?{{right_operand}})
      scope: keyword.operator.two-signs.qsp
    # подсветка однознаковых операторов
    - match: (?<={{left_operand}})\s*?{{operacion_one_sign}}(?!(>|\s*?{{right_operand}}))
      scope: invalid.illegal.qsp avs_wrong_one_sign_with_out_right
    - match: (?<=(<|\&|\(|\{|\[))\s*?{{operacion_one_sign}}(?=\s*?{{right_operand}}*)
      scope: invalid.illegal.qsp avs_wrong_one_sign_with_out_left
    - match: '{{operacion_one_sign}}'
      scope: keyword.operator.one-sign.qsp
    # Правила для запятых
    - match: (?<={{left_operand}})\s*?(,)(?!\s*?{{right_operand}})
      scope: iinvalid.illegal.qsp avs_wrong_comma_with_out_right
    - match: (?<=(<|\&|\(|\{|\[))\s*?(,)(?=\s*?{{right_operand}}*)
      scope: invalid.illegal.qsp avs_wrong_comma_with_out_left
    - match: (,)
      scope: punctuation.separator.comma.qsp
    # Правила для амперсандов
    - match: (^\s*?|\(\s*?|\{\s*?|\[\s*?)\K(\&)(?=\s*?{{right_operand}}*)
      scope: invalid.illegal.qsp avs_wrong_comma_with_out_left
    - match: \&
      scope: keyword.operator.ampersand.qsp
    # Правила для no
    - match: (\bno\b)(?!\s*?{{right_operand}})
      scope: invalid.illegal.qsp avs_wrong_comma_with_out_left
    - match: (\bno\b)
      scope: keyword.operator.word.qsp

  # # # ------------------------ Подсветка комментариев ------------------------  # # #
  comments: # комментарии. Как однострочные, так и многострочные поддерживаются отсюда
    - match: (?<=\{)((\s*?)|(\&\s*?))(!)
      captures:
        3: support.function.builtin.qsp
        4: punctuation.definition.comment.qsp
      push:
        - meta_scope: comment.qsp
        - match: (\n\r|\r|\r\n|\n)
          scope: comment.qsp
          pop: true
        - include: cominquotes
        - include: brackin
        - include: speccomments
    - match: ((^\s*?)|(\&\s*?))(!)
      captures:
        3: support.function.builtin.qsp
        4: punctuation.definition.comment.qsp
      push:
        - meta_scope: comment.qsp
        - match: (\n\r|\r|\r\n|\n)
          scope: comment.qsp
          pop: true
        - include: cominquotes
        - include: brackin
        - include: speccomments

  brackin: # данная конструкция отвечает за поддержку вложенных скобок в комменте
    - match: '\{'
      scope: comment.qsp
      push:
        - match: '\}'
          scope: comment.qsp
          pop: true
        - include: brackin
        - include: quoteinbrack
        - include: apinbrack

  quoteinbrack: # данная конструкция отвечает за поддержку апострофов и кавычек в комменте
    - match: '{{quote}}'
      scope: comment.qsp
      push:
        - match: '{{quote}}'
          scope: comment.qsp
          pop: true
    - match: '{{quote}}'
      scope: invalid.illegal.qsp

  apinbrack:
    - match: '{{ap}}'
      scope: comment.qsp
      push:
        - match: '{{ap}}'
          scope: comment.qsp
          pop: true
    - match: '{{ap}}'
      scope: invalid.illegal.qsp

  cominquotes:
    - match: '[^{{opener}}]*?\"'
      scope: comment.qsp
      push:
        - meta_scope: comment.qsp
        - match: ^.*?{{quote}}.*?{{quote}}.*?$
          scope: comment.qsp
        - match: \"
          scope: comment.qsp
          pop: true
    - match: "[^{{opener}}]*?\'"
      scope: comment.qsp
      push:
        - meta_scope: comment.qsp
        - match: ^.*?{{ap}}.*?{{ap}}.*?$
          scope: comment.qsp
        - match: \'
          scope: comment.qsp
          pop: true

  speccomments:
    - match: (?<=\!)@.*?(?={{nr}})
      scope: comment.qsp markup.italic.qsp avs-speccomments

  preprocessor:
    - match: ^(\!@pp\:.*?)$
      captures:
        1: meta.preprocessor.qsp diff.deleted.qsp avs-preprocessor
        #2: markup.bold preprocessor.avs

  # # # ---------- фигурные скобки --------------- # # #
  figurebrack:
    - match: '\{'
      scope: punctuation.section.block.begin.qsp avs_brace_begin
      push:
        - meta_content_scope: meta.block
        
        - include: htmlsupport
        - include: figurebrack
        - include: actions
        - include: conditions
        - include: loop
        - include: kw_declarations
        - include: sugarfunc
        - match: (?i:(\bend\b)) # подсветка лишнего end'а
          scope: invalid.illegal.qsp
        - match: ^(?:\s*?)(?i:(\belse\b)) # лишний else
          scope: invalid.illegal.qsp
        - match: (?i:(\belseif\b)) # elseif работает только в многострочной форме (исправить, если изменится в 5.8.0)
          scope: invalid.illegal.qsp
        - include: preprocessor
        - include: comments
        - include: labels
        - include: operators
        - include: operacion
        - include: system_variables
        - include: functions
        - include: numeric
        - include: strings
        - include: separator_continuation
        - match: '\}'
          scope: punctuation.section.block.end.qsp avs_brace_end
          pop: true

  htmlsupport:
    - match: (?i:<qhtml>)
      scope: message.error avs.html
      push:
        - clear_scopes: true
        - meta_scope: markup.raw avs.htmlsupport text.html
        - include: Packages/HTML/HTML.sublime-syntax
      with_prototype:
        - match: (?i:</qhtml>)
          scope: message.error avs.html
          pop: true

  separator_continuation:
    - match: \s_(?=$)
      scope: punctuation.separator.continuation avs_longstring
