%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
#
# Quest Soft Player 5.7.0 Language:
# http://qsp.su/

name: QSP # название языка
file_extensions: # расширения файлов
  - qsps
  - qsp-txt
  - txt-qsp
first_line_match: (^(?i:qsp-game)$|^(?i:qsp-game\s+.*)$)
scope: source.QSP
variables: # назначаем переменные для удобства
  oprt: (?i:(exec|set|let|local|view|inclib|freelib|addqst|openqst|opengame|savegame|killqst|cmdclr|cmdclear|all|close|exit|play|settimer|menu|unsel|unselect|jump|copyarr|delact|wait|killall|dynamic|killvar|delobj|addobj|killobj|cls|cla|gs|xgt|gt|goto|gosub|xgoto|refint|showobjs|showstat|showacts|showinput|msg))
  oprtms: (?i:(act|if|elseif|else|loop|while|step|end)) # support.type
  oprttxt: (?i:(pl?|nl|clr|clear))
  sysvarnum: (?i:(nosave|disablescroll|disablesubex|debug|usehtml|(b|f|l)color|fsize))
  sysvartxt: (?i:(counter|ongload|ongsave|onnewloc|onactsel|onobjsel|onobjadd|onobjdel|usercom|fname|backimage))
  sysvarot: (?i:(args|result))
  fncnum: (?i:obj|isplay|len|rgb|msecscount|no|and|mod|countobj|instr|isnum|val|loc|or|r(a)?nd|arrsize|arrpos|arrcomp|strcomp|strpos)
  fnctxt: (?i:(input|user_text|usrtxt|desc|maintxt|stattxt|qspver|curloc|selobj|selact|curacts|mid|(u|l)case|trim|replace|getobj|str|strfind))
  fncot: (?i:(iif|dyneval|func|max|min|arritem))
  figop: '\{'
  figcls: '\}'
  quote: '"'
  ap: "'"
  opener: '{{figop}}{{quote}}{{ap}}'
  closer: '{{figcls}}{{quote}}{{ap}}'
  left_operand: '({{quote}}|{{ap}}|\)|\}|\$|\w|\d)'
  right_operand: '({{quote}}[^{{quote}}]*|{{ap}}[^{{ap}}]*|\([^\)]*?|\{|(\$?|-?)\w+?|-?\d+?|\@)'
  nr: (\n\r|\r|\r\n|\n)
  oprcid: (<=|>=|\+=|-=|<>)
  rightvar: (\$?[A-Za-zА-Яа-я_][\w\.]*)

contexts: # теперь необходимо определить "контексты" подсветки
  main: # обязательный контекст main, с него стартует распознавание синтаксиса
    - match: "" # совпадения не ищутся
      push: # всё вытесняется подсветкой
        - include: preprocessor
        - match: ".*" # любое множество символов подсвечивается как комментарий
          scope: meta.diff avs-mainscope
      with_prototype:
        - match: ^(\s*?)(#)\s?.+$
          scope: constant.character.qsp avs-locstart
          push:
            - meta_scope: avs-location-body
            - match: ^\1(-)(.*?)$
              pop: true
              captures:
                1: markup.heading punctuation.definition.heading avs-locend
                2: entity.name avs.locend.comments
            - include: locations
    
  locations:
    - include: figurebrack
    - include: actions
    - include: conditions
    - include: loop
    - include: setvars
    - include: sugarfunc
    - match: \bend\b # подсветка лишнего end'а
      scope: invalid.qsp avs.error avs.wrongend
    - match: ^(?:\s*?)\belse\b # лишний else
      scope: invalid.qsp avs.error avs.wrongelse
    - match: \belseif\b # elseif работает только в многострочной форме (исправить, если изменится в 5.8.0)
      scope: invalid.qsp avs.error avs.wrongelseif
    - include: preprocessor
    - include: comments
    - include: markers
    - include: operators
    - include: operacion
    - include: sysvar
    - include: functions
    - include: numeric
    - include: strings

  # неявный вызов функций
  sugarfunc:
    - match: (\@[\w\.\#]+)(?=\s*\()
      scope: entity.other.inherited-class
    - match: (\@[\w\.\#]+\s+{{right_operand}})
      scope: invalid
    - match: (\@[\w\.\#]+)
      scope: entity.other.inherited-class

  # действия и условия
  actions:
    - match: '(?<=\{)(\s*?)(act)(?=\s*?.*?\:\s*?$)'
      captures:
        2: support.type avs-startact
      push:
        - match: ^(\s*?)(\bend\s+?act\b|\bend\b)([^\&\}\n\r]*)
          captures:
            2: support.type avs-endact
            3: constant.numeric.line-number.find-in-files markup.italic avs-endactcomm
          pop: true
        - include: wrongcloseinscope
        - include: wrongclose
        - include: locations
    - match: '^(\s*?)(act)(?=\s*?.*?\:\s*?$)'
      captures:
        2: support.type avs-startact
      push:
        - match: ^(\s*?)(\bend\s+?act\b|\bend\b)([^\&\n\r]*)
          captures:
            2: support.type avs-endact
            3: constant.numeric.line-number.find-in-files markup.italic avs-endactcomm
          pop: true
        - include: wrongclose
        - include: wrongcloseinscope
        - include: locations

  # циклы
  loop:
    - match: '(?<=\{)(\s*?)(\bloop\b)(?=.*?\bwhile\b\s\S.*?(\bstep\b)?\s*?.*?\:\s*?$)'
      captures:
        2: support.type avs-startloop
      push:
        - match: ^(\s*?)(\bend\s+?loop\b|\bend\b)([^\&\}\n\r]*)
          captures:
            2: support.type avs-endloop
            3: constant.numeric.line-number.find-in-files markup.italic avs-endloopcomm
          pop: true
        - include: wrongcloseinscope
        - include: wrongclose
        - include: locations
    - match: '^(\s*?)(\bloop\b)(?=.*?\bwhile\b\s\S.*?(\bstep\b)?\s*?.*?\:\s*?$)'
      captures:
        2: support.type avs-startloop
      push:
        - match: ^(\s*?)(\bend\s+?loop\b|\bend\b)([^\&\n\r]*)
          captures:
            2: support.type avs-endloop
            3: constant.numeric.line-number.find-in-files markup.italic avs-endloopcomm
          pop: true
        - include: wrongclose
        - include: wrongcloseinscope
        - include: locations
    - match: '(\bloop\b)(?!.*\bwhile\b)'
      scope: invalid

  # конструкции условий
  conditions:
    - match: '(?<=\{)(\s*?)(if)(?=\s*?.*?\:\s*?$)'
      captures:
        2: support.type avs-startif
      push:
        - match: ^(\s*?)(\bend\s+?if\b|\bend\b)([^\&\}\n\r]*)
          captures:
            2: support.type avs-endif
            3: constant.numeric.line-number.find-in-files markup.italic avs-endifcomm
          pop: true
        - include: wrongcloseinscope
        - include: wrongclose
        - include: elseifelse
        - include: locations
    - match: '^(\s*?)(if)(?=\s*?.*?\:\s*?$)'
      captures:
        2: support.type avs-startif
      push:
        - match: ^(\s*?)(\bend\s+?if\b|\bend\b)([^\&\n\r]*)
          captures:
            2: support.type avs-endif
            3: constant.numeric.line-number.find-in-files markup.italic avs-endifcomm
          pop: true
        - include: wrongclose
        - include: wrongcloseinscope
        - include: elseifelse
        - include: locations

  wrongclose:
    - match: ^\s*?(-)(.*)({{nr}}$|$)
      scope: invalid.qsp avs.error avs.wrongelse1
      pop: true

  wrongcloseinscope:
    - match: \}(.*)({{nr}}$|$)
      scope: invalid.qsp avs.error avs.wrongelse1
      pop: true

  elseifelse:
    - match: ^\s*?\belse\b(\:?)\s*?$ # правильный else
      scope: support.type avs.else
    - match: ^\s*?(\belse\b)([^\:]*)(\:?)\s*?([^\n\r]*)$
      captures:
        1: support.type avs.else
        2: invalid.illegal.expected-mapping-key.qsp avs.error avs.wrongelse1
        3: support.type avs.else
        4: invalid.illegal.expected-mapping-key.qsp avs.error avs.wrongelse2
    - match: ^(?:\s*?)\belseif\b(?=\s+\S.*?\:\s*?{{nr}})
      scope: support.type avs.elseif
    - match: ^(?:\s*?)(\belseif\b)(\s+\S.*?\:\s*?[^\n\r]*)$
      captures:
        1: support.type avs.else
        2: invalid.illegal.expected-mapping-key.qsp avs.error avs.wrongelse1

  # set и local
  setvars:
      # ([A-Za-zА-Яа-я_][\w\.]*)
    - match: \b(set|local)\b(?=\s+{{rightvar}}(\,\s*{{rightvar}})*(\s*\=[^=]+)?\s*(\&|{{nr}}|\}|\bwhile\b))
      scope: support.function.qsp
    - match: \b(set|local)\b
      scope: invalid.qsp

  # операции
  operacion:
    # ошибка записи операторов операций без правого операнда
    - match: (?<={{left_operand}})\s*?(\!|\/|\*)(?!\s*?{{right_operand}})
      scope: invalid.qsp avs.error avs.wrongoperator1
    # ошибка записи операторов больше-равно и меньше-равно без правого операнда
    - match: (?<={{left_operand}})\s*{{oprcid}}(?!\s*?{{right_operand}})
      scope: invalid.qsp avs.error avs.wrongoperator2
    # ошибка записи операторов больше-равно и меньше-равно без левого операнда или отдельной строкой
    - match: (^\s*?|\&\s*?|\(\s*?|\{\s*?|\[\s*?)\K{{oprcid}}(?=\s*?{{right_operand}}*)
      scope: invalid.qsp avs.error avs.wrongoperator3
    # подсветка правильно записанных операторов больше-равно и меньше-равно
    - match: (?<={{left_operand}})\s*?{{oprcid}}(?=\s*?{{right_operand}}) 
      scope: support.function.qsp avs.operacion1 # допустимые в QSP => и =< в данной подсветке не поддерживаются
    # ошибка записи операторов > < =  без правого операнда
    - match: (?<={{left_operand}})\s*?(\+|-|<|>|=)(?!\s*?{{right_operand}})
      scope: invalid.qsp avs.error avs.wrongoperator5
    # ошибка записи операторов больше-равно и меньше-равно без левого операнда или отдельной строкой
    - match: (^\s*?|\&\s*?|\(\s*?|\{\s*?|\[\s*?)\K(<|>|=)(?=\s*?{{right_operand}}*)
      scope: invalid.qsp avs.error avs.wrongoperator6
    # подсветка правильно записанных операторов > < =
    - match: (\+|-|<|>|=)
      scope: support.function.qsp avs.operacion5 
    # ошибка записи запятых без правого операнда
    - match: (?<={{left_operand}})\s*?(\/|\*|=|,)(?!\s*?{{right_operand}})
      scope: invalid.qsp avs.error avs.wrongcomma2
    # ошибка записи запятых без левого операнда или отдельной строкой
    - match: (^\s*?|\&\s*?|\(\s*?|\{\s*?|\[\s*?)\K(\/|\*|=|,)(?=\s*?{{right_operand}}*)
      scope: invalid.qsp avs.error avs.wrongcomma3
    # подсветка правильно записанных операторов больше-равно и меньше-равно
    - match: (\/|\*|=|,) # допустимые в QSP => и =< в данной подсветке не поддерживаются
      scope: support.function.qsp avs.comma1
    # подсветка всех операторов для операций, в т.ч. скобок и прочего
    - match: '(?i:(!|\:|\;|\[|\]|\(|\)|\&|\+|-|(>|<)=?|=?(>|<)))'
      scope: support.function.qsp avs.operacion9

  numeric:
    - match: \b\d+([A-Za-zа-яА-Я\$\._]+\d*)+\b # неправильные переменные
      scope: invalid.illegal.expected-mapping-key.qsp avs.error avs.wrongvar
    - match: \b[0-9]+\b
      scope: constant.numeric avs-numberic
    
  operators:
    # подсветка операторов
    - match: \b({{oprt}}|{{oprttxt}})\b
      scope: support.function.qsp avs.operators
    - match: (\*)(?={{oprttxt}}\b)
      scope: support.function.qsp avs.operators
    - match: \b{{oprtms}}\b
      scope: support.type avs.operators-multiline
    - match: (\*)(?={{oprt}}\b)
      scope: invalid.illegal.expected-mapping-key.qsp avs.error
    - match: (\*)(?={{oprtms}}\b)
      scope: invalid.illegal.expected-mapping-key.qsp avs.error

  sysvar:
    - match: (?<!\$)({{sysvartxt}}) # подсвечивает все системные переменные текстового типа, перед названием которых нет символа $
      scope: invalid.illegal.expected-mapping-key.qsp avs.error
    - match: (\$)(?=(\b{{sysvartxt}}|{{sysvarot}}\b))
      scope: keyword.qsp avs.sysvar
    - match: \b({{sysvarnum}}|{{sysvartxt}}|{{sysvarot}})\b
      scope: keyword.qsp avs.sysvar
    - match: (\$)(?={{sysvarnum}}\b) # подсвечивает символ доллара перед названием числовых переменных
      scope: invalid.illegal.expected-mapping-key.qsp avs.error

  functions:
    - match: (?<!\$)(\b{{fnctxt}}\b) # подсвечивает все системные переменные текстового типа, перед названием которых нет символа $
      scope: invalid avs.error
    - match: (\$)(?=({{fnctxt}}\b|{{fncot}}\b))
      scope: markup.heading punctuation.definition.heading avs.function
    - match: \b({{fncnum}}|{{fnctxt}}|{{fncot}})\b
      scope: markup.heading punctuation.definition.heading avs.function
    - match: (\$)(?=\b{{fncnum}}\b) # подсвечивает символ доллара перед названием числовых переменных
      scope: invalid.illegal.expected-mapping-key.qsp avs.error

  markers:
    - match: ^(\s*?\:|\:)[^&'"]+
      scope: entity.name avs-markup

  # # # ------------------- строки ------------------------ # # #
  strings:
    - match: '"'
      push:
        - meta_scope: string.qsp
        - match: '""'
          scope: string.qsp
        - match: '"'
          pop: true
        - include: preprocessor
        - include: subexpression
        - include: htmlsupport      
    - match: "'"
      push:
        - meta_scope: string.qsp
        - match: "''"
          scope: string.qsp
        - match: "'"
          pop: true
        - include: preprocessor
        - include: subexpression
        - include: htmlsupport   

  subexpression:
    - match: '<<'
      scope: entity.name avs-markup
      push:
        - clear_scopes: true
        - match: '>>'
          scope: entity.name avs-markup
          pop: true
        - include: subex

  subex:
    - include: figurebrack
    - match: (\n\r|\r|\r\n|\n)
      scope: invalid.qsp avs.error avs.wrongenter
    - include: opinse
    - include: sysvar
    - include: functions
    - include: numeric
    - include: strings

  opinse:
    # ошибка записи операторов операций без правого операнда
    - match: (?<={{left_operand}})\s*?(\!|\/|\*)(?!\s*?{{right_operand}})
      scope: invalid.illegal.expected-mapping-key.qsp avs.error avs.wrongoperator1
    # ошибка записи операторов больше-равно и меньше-равно без правого операнда
    - match: (?<={{left_operand}})\s*?{{oprcid}}(?!\s*?{{right_operand}})
      scope: invalid.illegal.expected-mapping-key.qsp avs.error avs.wrongoperator2
    # ошибка записи операторов больше-равно и меньше-равно без левого операнда или отдельной строкой
    - match: (^\s*?|\&\s*?|\(\s*?|\{\s*?|\[\s*?)\K{{oprcid}}(?=\s*?{{right_operand}}*)
      scope: invalid.illegal.expected-mapping-key.qsp avs.error avs.wrongoperator3
    # подсветка правильно записанных операторов больше-равно и меньше-равно
    - match: (?<={{left_operand}})\s*?{{oprcid}}(?=\s*?{{right_operand}})
      scope: support.function.qsp avs.operacion1 # допустимые в QSP => и =< в данной подсветке не поддерживаются
    # ошибка записи операторов > < =  без правого операнда
    - match: (?<={{left_operand}})\s*?(\+|-|<|>|=)(?!(>|\s*?{{right_operand}}))
      scope: invalid.illegal.expected-mapping-key.qsp avs.error avs.wrongoperator5
    # ошибка записи операторов больше-равно и меньше-равно без левого операнда или отдельной строкой
    - match: (?<=(<|\&|\(|\{|\[))\s*?(<|>|=)(?=\s*?{{right_operand}}*)
      scope: invalid.illegal.expected-mapping-key.qsp avs.error avs.wrongoperator6
    # подсветка правильно записанных операторов > < =
    - match: (\+|-|<|>|=)
      scope: support.function.qsp avs.operacion5 
    # ошибка записи запятых без правого операнда
    - match: (?<={{left_operand}})\s*?(\/|\*|=|,)(?!\s*?{{right_operand}})
      scope: invalid.illegal.expected-mapping-key.qsp avs.error avs.wrongcomma2
    # ошибка записи запятых без левого операнда или отдельной строкой
    - match: (?<=(<|\&|\(|\{|\[))\s*?(\/|\*|=|,)(?=\s*?{{right_operand}}*)
      scope: invalid.illegal.expected-mapping-key.qsp avs.error avs.wrongcomma3
    # подсветка правильно записанных операторов больше-равно и меньше-равно
    - match: (\/|\*|=|,) # допустимые в QSP => и =< в данной подсветке не поддерживаются
      scope: support.function.qsp avs.comma1
    # подсветка всех операторов для операций, в т.ч. скобок и прочего
    - match: '(?i:(!|\:|\;|\[|\]|\(|\)|\&|\+|-|(>|<)=?|=?(>|<)))'
      scope: support.function.qsp avs.operacion9

  # # # ------------------------ Подсветка комментариев ------------------------  # # #
  comments: # комментарии. Как однострочные, так и многострочные поддерживаются отсюда
    - match: (?<=\{)((\s*?)|(\&\s*?))(!)
      captures:
        3: support.function.qsp
        4: comment.qsp
      push:
        - meta_scope: comment.qsp
        - match: (\n\r|\r|\r\n|\n)
          scope: comment.qsp
          pop: true
        - include: cominquotes
        - include: brackin
        - include: speccomments
    - match: ((^\s*?)|(\&\s*?))(!)
      captures:
        3: support.function.qsp
        4: comment.qsp
      push:
        - meta_scope: comment.qsp
        - match: (\n\r|\r|\r\n|\n)
          scope: comment.qsp
          pop: true
        - include: cominquotes
        - include: brackin
        - include: speccomments

  brackin: # данная конструкция отвечает за поддержку вложенных скобок в комменте
    - match: '\{'
      scope: comment.qsp
      push:
        - match: '\}'
          scope: comment.qsp
          pop: true
        - include: brackin
        - include: quoteinbrack
        - include: apinbrack

  quoteinbrack: # данная конструкция отвечает за поддержку апострофов и кавычек в комменте
    - match: '{{quote}}'
      scope: comment.qsp
      push:
        - match: '{{quote}}'
          scope: comment.qsp
          pop: true
    - match: '{{quote}}'
      scope: invalid.qsp

  apinbrack:
    - match: '{{ap}}'
      scope: comment.qsp
      push:
        - match: '{{ap}}'
          scope: comment.qsp
          pop: true
    - match: '{{ap}}'
      scope: invalid.qsp

  cominquotes:
    - match: '[^{{opener}}]*?\"'
      scope: comment.qsp
      push:
        - meta_scope: comment.qsp
        - match: ^.*?{{quote}}.*?{{quote}}.*?$
          scope: comment.qsp
        - match: \"
          scope: comment.qsp
          pop: true
    - match: "[^{{opener}}]*?\'"
      scope: comment.qsp
      push:
        - meta_scope: comment.qsp
        - match: ^.*?{{ap}}.*?{{ap}}.*?$
          scope: comment.qsp
        - match: \'
          scope: comment.qsp
          pop: true

  speccomments:
    - match: (?<=\!)@.*?(?={{nr}})
      scope: comment markup.italic speccomments.avs

  preprocessor:
    - match: ^(\!@pp\:.*?)$
      captures:
        1: diff.deleted preprocessor.avs
        #2: markup.bold preprocessor.avs

  # # # ---------- фигурные скобки --------------- # # #
  figurebrack:
    - match: '\{'
      scope: support.function.qsp avs.figopen
      push:
        - include: htmlsupport
        - include: locations
        - match: '\}'
          scope: support.function.qsp avs.figclose
          pop: true

  htmlsupport:
    - match: (?i:<qhtml>)
      scope: message.error avs.html
      push:
        - clear_scopes: true
        - meta_scope: markup.raw avs.htmlsupport
        - include: Packages/HTML/HTML.sublime-syntax
      with_prototype:
        - match: (?i:</qhtml>)
          scope: message.error avs.html
          pop: true
