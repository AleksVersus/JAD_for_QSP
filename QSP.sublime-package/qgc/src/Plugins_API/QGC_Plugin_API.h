#ifndef __QGC_PLUGIN_API_H__
#define __QGC_PLUGIN_API_H__

#pragma once
//

/* --------------------------------------------- ОБЩЕЕ --------------------------------------------- */
/*
* Используемые сокращения и префиксы:
*	QGCP - "QSP Game Converter" Plugin - плагин для программы QSP Game Converter
*	API  - "Application Programming Interface" - программный интерфейс для взаимодействия двух программ
* 
* Также в API можно заметить наличие разных префиксов в названиях переменных, структур и прочего - все
* потому, что данное API следует соглашению об именовании под стандартом венгерской нотации:
*	Wikipedia (РУС.): https://ru.wikipedia.org/wiki/Венгерская_нотация
*	Wikipedia (ENG.): https://en.wikipedia.org/wiki/Hungarian_notation
*/

#ifndef QGCP_DEFINES
	#define QGCP_DEFINES

	#define QGCP_API_VERSION     1                                   // Версия данного API
	#define DLL_EXPORT           extern "C" __declspec(dllexport)    // Модификатор функции в экспортируемую
#endif

/*
* Типы данных.
* В данном API они используются не все - лишь некоторые, но все прочие также перечислены заранее, на всякий случай.
*/

// Знаковые типы данных
typedef signed char          int8_t;                                 // 1 байт  :                       -128 ... 127
typedef short                int16_t;                                // 2 байта :                    -32.768 ... 32.767
typedef int                  int32_t;                                // 4 байта :             -2.147.483.648 ... 2.147.483.647
typedef long long            int64_t;                                // 8 байт  : -9.223.372.036.854.775.808 ... 9.223.372.036.854.775.807

// Баззнаковые типы данных
typedef unsigned char        uint8_t;                                // 1 байт  :                          0 ... 255
typedef unsigned short       uint16_t;                               // 2 байта :                          0 ... 65.535
typedef unsigned int         uint32_t;                               // 4 байта :                          0 ... 4.294.967.295
typedef unsigned long long   uint64_t;                               // 8 байт  :                          0 ... 18.446.744.073.709.551.615

// Соответствие других типов данных в языке, на котором написана программа
/*
*           void - не является определенным типом. Например, если в качестве результата функции указан этот тип, то такая функция не возвращает ничего (в некоторых языках такая функция называется "процедурой").
*           bool - uint8_t
*           char - int8_t
*        wchar_t - uint16_t
*/

struct QGCP_CHARARRAY {                                              // # Структура описания массива символов
	wchar_t* pwszData = nullptr;                                     // Указатель на нуль-терминированную строку
	uint32_t nSize = 0;                                              // Размер нуль-терминированной строки
};

struct QGCP_INFO {                                                   // # Структура описания информации о плагине
	enum TWORKER {                                                   // # Перечисление режимов работы плагина для указания совместимости с конкретным режимом работы программы
		pwInfo,                                                      // Получение информации о содержимом QSP файла (в данном режиме нет работы для плагинов предварительной обработки)
		pwDisassemble,                                               // Разборка QSP файла на исходники
		pwAssemble,                                                  // Сборка QSP файла из исходников
	};

	enum TMETHOD {                                                   // # Перечисление методов работы плагина для указания необходимого этапа работы с ним
		pmPreprocessor,                                              // Плагин предварительной обработки (этому методу разрешается работа только в одном режиме)
		pmPostprocessor,                                             // Плагин последующей обработки (этому методу разрешается работа в нескольких режимах)
	};

	uint8_t u8ApiVersion = QGCP_API_VERSION;                         // Используемая версия API при разработке плагина
	int32_t iWorker = pwInfo;                                        // Режим(ы) работы для совместимости с режимом работы программы
	TMETHOD eMethod = pmPreprocessor;                                // Метод работы для указания этапа работы плагина
};

// ---- | Функция, вызываемая при загрузке плагина
DLL_EXPORT void pluginInitialization();
// ---- | Функция, вызываемая при выгрузке плагина
DLL_EXPORT void pluginFinalization();
// ---- | Функция для передачи информации о плагине в программу
DLL_EXPORT QGCP_INFO* pluginInfo();

#endif